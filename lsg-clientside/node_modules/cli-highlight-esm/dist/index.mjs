import * as hljs from 'highlight.js';
import * as parse5 from 'parse5';
import { DEFAULT_THEME, plain } from './theme';
function colorizeNode(node, theme = {}) {
    switch (node.type) {
        case 'text': {
            return node.data;
        }
        case 'tag': {
            const hljsClass = /hljs-(\w+)/.exec(node.attribs.class);
            if (hljsClass) {
                const token = hljsClass[1];
                const nodeData = node.childNodes
                    .map(node => colorizeNode(node, theme))
                    .join('');
                return (theme[token] || DEFAULT_THEME[token] || plain)(nodeData);
            }
            // Return the data itself when the class name isn't prefixed with a highlight.js token prefix.
            // This is common in instances of sublanguages (JSX, Markdown Code Blocks, etc.)
            return node.childNodes.map(node => colorizeNode(node, theme)).join('');
        }
    }
    throw new Error('Invalid node type ' + node.type);
}
function colorize(code, theme = {}) {
    const fragment = parse5.parseFragment(code, {
        treeAdapter: parse5.treeAdapters.htmlparser2,
    });
    return fragment.childNodes.map(node => colorizeNode(node, theme)).join('');
}
/**
 * Apply syntax highlighting to `code` with ASCII color codes. The language is automatically
 * detected if not set.
 *
 * ```ts
 * import {highlight} from 'cli-highlight';
 * import * as fs from 'fs';
 *
 * fs.readFile('package.json', 'utf8', (err: any, json: string) => {
 *     console.log('package.json:');
 *     console.log(highlight(json));
 * });
 * ```
 *
 * @param code The code to highlight
 * @param options Optional options
 */
export function highlight(code, options = {}) {
    let html;
    if (options.language) {
        html = hljs.highlight(options.language, code, options.ignoreIllegals, options.continuation).value;
    }
    else {
        html = hljs.highlightAuto(code, options.languageSubset).value;
    }
    return colorize(html, options.theme);
}
/**
 * Returns all supported languages
 */
export function listLanguages() {
    return hljs.listLanguages();
}
/**
 * Returns true if the language is supported
 * @param name A language name, alias or file extension
 */
export function supportsLanguage(name) {
    return !!hljs.getLanguage(name);
}
export default highlight;
export * from './theme';
//# sourceMappingURL=index.js.map