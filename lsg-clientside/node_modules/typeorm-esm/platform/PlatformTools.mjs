import * as path from "path";
import * as fs from "fs";
import { highlight } from "cli-highlight-esm";
import chalk from "chalk";
import mysql from "mysql";
import debug from "debug";
import appRootPath from "app-root-path";
import glob from "glob";
import * as mkdirp from "mkdirp";
export { ReadStream } from "fs";
export { EventEmitter } from "events";
export { Readable, Writable } from "stream";
/**
 * Platform-specific tools.
 */
export class PlatformTools {
    /**
     * Gets global variable where global stuff can be stored.
     */
    static getGlobalVariable() {
        return global;
    }
    /**
     * Loads ("require"-s) given file or package.
     * This operation only supports on node platform
     */
    static load(name) {
        // if name is not absolute or relative, then try to load package from the node_modules of the directory we are currently in
        // this is useful when we are using typeorm package globally installed and it accesses drivers
        // that are not installed globally
        try {
            // switch case to explicit require statements for webpack compatibility.
            switch (name) {
                /**
                * mysql
                */
                case "mysql":
                    return mysql;
                /**
                * other modules
                */
                case "mkdirp":
                    return mkdirp;
                case "path":
                    return path;
                case "debug":
                    return debug;
                case "app-root-path":
                    return appRootPath;
                case "glob":
                    return glob;
                /**
                * default
                */
                default:
                    return undefined;
            }
        }
        catch (err) {
            console.error(`Module "${name}" can't be loaded`);
            throw err;
        }
    }
    /**
     * Normalizes given path. Does "path.normalize".
     */
    static pathNormalize(pathStr) {
        return path.normalize(pathStr);
    }
    /**
     * Gets file extension. Does "path.extname".
     */
    static pathExtname(pathStr) {
        return path.extname(pathStr);
    }
    /**
     * Resolved given path. Does "path.resolve".
     */
    static pathResolve(pathStr) {
        return path.resolve(pathStr);
    }
    /**
     * Synchronously checks if file exist. Does "fs.existsSync".
     */
    static fileExist(pathStr) {
        return fs.existsSync(pathStr);
    }
    static readFileSync(filename) {
        return fs.readFileSync(filename);
    }
    static appendFileSync(filename, data) {
        fs.appendFileSync(filename, data);
    }
    static async writeFile(path, data) {
        return new Promise((ok, fail) => {
            fs.writeFile(path, data, (err) => {
                if (err)
                    fail(err);
                ok();
            });
        });
    }
    /**
     * Gets environment variable.
     */
    static getEnvVariable(name) {
        return process.env[name];
    }
    /**
     * Highlights sql string to be print in the console.
     */
    static highlightSql(sql) {
        const theme = {
            "keyword": chalk.blueBright,
            "literal": chalk.blueBright,
            "string": chalk.white,
            "type": chalk.magentaBright,
            "built_in": chalk.magentaBright,
            "comment": chalk.gray,
        };
        return highlight(sql, { theme: theme, language: "sql" });
    }
    /**
     * Highlights json string to be print in the console.
     */
    static highlightJson(json) {
        return highlight(json, { language: "json" });
    }
    /**
     * Logging functions needed by AdvancedConsoleLogger
     */
    static logInfo(prefix, info) {
        console.log(chalk.gray.underline(prefix), info);
    }
    static logError(prefix, error) {
        console.log(chalk.underline.red(prefix), error);
    }
    static logWarn(prefix, warning) {
        console.log(chalk.underline.yellow(prefix), warning);
    }
    static log(message) {
        console.log(chalk.underline(message));
    }
    static warn(message) {
        return chalk.yellow(message);
    }
}
/**
 * Type of the currently running platform.
 */
PlatformTools.type = "node";
//# sourceMappingURL=PlatformTools.js.map