{"code":"import * as alt from 'alt';\r\nimport game from 'natives';\r\nimport Color from \"../utils/Color\";\r\nimport Screen from \"../utils/Screen\";\r\nexport default class Sprite {\r\n    constructor(textureDict, textureName, pos, size, heading = 0, color = new Color(255, 255, 255)) {\r\n        this.TextureDict = textureDict;\r\n        this.TextureName = textureName;\r\n        this.Pos = pos;\r\n        this.Size = size;\r\n        this.Heading = heading;\r\n        this.Color = color;\r\n        this.Visible = true;\r\n    }\r\n    LoadTextureDictionary() {\r\n        this.requestTextureDictPromise(this._textureDict).then((succ) => { });\r\n    }\r\n    requestTextureDictPromise(textureDict) {\r\n        return new Promise((resolve, reject) => {\r\n            game.requestStreamedTextureDict(textureDict, true);\r\n            let inter = alt.setInterval(() => {\r\n                if (game.hasStreamedTextureDictLoaded(textureDict)) {\r\n                    alt.clearInterval(inter);\r\n                    return resolve(true);\r\n                }\r\n            }, 10);\r\n        });\r\n    }\r\n    set TextureDict(v) {\r\n        this._textureDict = v;\r\n        if (!this.IsTextureDictionaryLoaded)\r\n            this.LoadTextureDictionary();\r\n    }\r\n    get TextureDict() {\r\n        return this._textureDict;\r\n    }\r\n    get IsTextureDictionaryLoaded() {\r\n        return game.hasStreamedTextureDictLoaded(this._textureDict);\r\n    }\r\n    Draw(textureDictionary, textureName, pos, size, heading, color, loadTexture) {\r\n        textureDictionary = textureDictionary || this.TextureDict;\r\n        textureName = textureName || this.TextureName;\r\n        pos = pos || this.Pos;\r\n        size = size || this.Size;\r\n        heading = heading || this.Heading;\r\n        color = color || this.Color;\r\n        loadTexture = loadTexture || true;\r\n        if (loadTexture) {\r\n            if (!game.hasStreamedTextureDictLoaded(textureDictionary))\r\n                game.requestStreamedTextureDict(textureDictionary, true);\r\n        }\r\n        const screenw = Screen.Width;\r\n        const screenh = Screen.Height;\r\n        const height = 1080.0;\r\n        const ratio = screenw / screenh;\r\n        const width = height * ratio;\r\n        const w = this.Size.Width / width;\r\n        const h = this.Size.Height / height;\r\n        const x = this.Pos.X / width + w * 0.5;\r\n        const y = this.Pos.Y / height + h * 0.5;\r\n        game.drawSprite(textureDictionary, textureName, x, y, w, h, heading, color.R, color.G, color.B, color.A, true);\r\n    }\r\n}\r\n","references":["B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Color.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Point.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Size.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Screen.ts"]}
