{"code":"import Font from \"../enums/Font\";\r\nimport Alignment from \"../enums/Alignment\";\r\nimport ItemsCollection from \"../modules/ItemsCollection\";\r\nimport ListItem from \"../modules/ListItem\";\r\nimport ResText from \"../modules/ResText\";\r\nimport Sprite from \"../modules/Sprite\";\r\nimport Color from \"../utils/Color\";\r\nimport Point from \"../utils/Point\";\r\nimport Size from \"../utils/Size\";\r\nimport Screen from \"../utils/Screen\";\r\nimport UIMenuItem from \"./UIMenuItem\";\r\nexport default class UIMenuListItem extends UIMenuItem {\r\n    constructor(text, description = \"\", collection = new ItemsCollection([]), startIndex = 0, data = null) {\r\n        super(text, description, data);\r\n        this.ScrollingEnabled = true;\r\n        this.HoldTimeBeforeScroll = 200;\r\n        this._currentOffset = 0;\r\n        this._itemsCollection = [];\r\n        this._index = 0;\r\n        let y = 0;\r\n        this.Collection = collection.getListItems();\r\n        this.Index = startIndex;\r\n        this._arrowLeft = new Sprite(\"commonmenu\", \"arrowleft\", new Point(110, 105 + y), new Size(30, 30));\r\n        this._arrowRight = new Sprite(\"commonmenu\", \"arrowright\", new Point(280, 105 + y), new Size(30, 30));\r\n        this._itemText = new ResText(\"\", new Point(290, y + 104), 0.35, Color.White, Font.ChaletLondon, Alignment.Right);\r\n    }\r\n    get Collection() {\r\n        return this._itemsCollection;\r\n    }\r\n    set Collection(v) {\r\n        if (!v)\r\n            throw new Error(\"The collection can't be null\");\r\n        this._itemsCollection = v;\r\n    }\r\n    set SelectedItem(v) {\r\n        const idx = this.Collection.findIndex(li => li.Id === v.Id);\r\n        if (idx > 0)\r\n            this.Index = idx;\r\n        else\r\n            this.Index = 0;\r\n    }\r\n    get SelectedItem() {\r\n        return this.Collection.length > 0 ? this.Collection[this.Index] : null;\r\n    }\r\n    get SelectedValue() {\r\n        return this.SelectedItem == null\r\n            ? null\r\n            : this.SelectedItem.Data == null\r\n                ? this.SelectedItem.DisplayText\r\n                : this.SelectedItem.Data;\r\n    }\r\n    get Index() {\r\n        if (this.Collection == null)\r\n            return -1;\r\n        if (this.Collection != null && this.Collection.length == 0)\r\n            return -1;\r\n        return this._index % this.Collection.length;\r\n    }\r\n    set Index(value) {\r\n        if (this.Collection == null)\r\n            return;\r\n        if (this.Collection != null && this.Collection.length == 0)\r\n            return;\r\n        this._index = 100000000 - (100000000 % this.Collection.length) + value;\r\n        const caption = this.Collection.length >= this.Index\r\n            ? this.Collection[this.Index].DisplayText\r\n            : \" \";\r\n        this._currentOffset = Screen.GetTextWidth(caption, this._itemText && this._itemText.Font ? this._itemText.Font : 0, 0.35);\r\n    }\r\n    setCollection(collection) {\r\n        this.Collection = collection.getListItems();\r\n    }\r\n    setCollectionItem(index, item, resetSelection = true) {\r\n        if (index > this.Collection.length)\r\n            throw new Error(\"Index out of bounds\");\r\n        if (typeof item === \"string\")\r\n            item = new ListItem(item);\r\n        this.Collection.splice(index, 1, item);\r\n        if (resetSelection)\r\n            this.Index = 0;\r\n    }\r\n    SetVerticalPosition(y) {\r\n        this._arrowLeft.Pos = new Point(300 + this.Offset.X + this.Parent.WidthOffset, 147 + y + this.Offset.Y);\r\n        this._arrowRight.Pos = new Point(400 + this.Offset.X + this.Parent.WidthOffset, 147 + y + this.Offset.Y);\r\n        this._itemText.Pos = new Point(300 + this.Offset.X + this.Parent.WidthOffset, y + 147 + this.Offset.Y);\r\n        super.SetVerticalPosition(y);\r\n    }\r\n    SetRightLabel(text) {\r\n        return this;\r\n    }\r\n    SetRightBadge(badge) {\r\n        return this;\r\n    }\r\n    Draw() {\r\n        super.Draw();\r\n        const caption = this.Collection.length >= this.Index\r\n            ? this.Collection[this.Index].DisplayText\r\n            : \" \";\r\n        const offset = this._currentOffset;\r\n        this._itemText.Color = this.Enabled\r\n            ? this.Selected\r\n                ? this.HighlightedForeColor\r\n                : this.ForeColor\r\n            : new Color(163, 159, 148);\r\n        this._itemText.Caption = caption;\r\n        this._arrowLeft.Color = this.Enabled\r\n            ? this.Selected\r\n                ? this.HighlightedForeColor\r\n                : this.ForeColor\r\n            : new Color(163, 159, 148);\r\n        this._arrowRight.Color = this.Enabled\r\n            ? this.Selected\r\n                ? this.HighlightedForeColor\r\n                : this.ForeColor\r\n            : new Color(163, 159, 148);\r\n        this._arrowLeft.Pos = new Point(380 - offset + this.Offset.X + this.Parent.WidthOffset, this._arrowLeft.Pos.Y);\r\n        if (this.Selected) {\r\n            this._arrowLeft.Draw();\r\n            this._arrowRight.Draw();\r\n            this._itemText.Pos = new Point(405 + this.Offset.X + this.Parent.WidthOffset, this._itemText.Pos.Y);\r\n        }\r\n        else {\r\n            this._itemText.Pos = new Point(420 + this.Offset.X + this.Parent.WidthOffset, this._itemText.Pos.Y);\r\n        }\r\n        this._itemText.Draw();\r\n    }\r\n}\r\n","references":["B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/enums/BadgeStyle.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/enums/Font.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/enums/Alignment.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/ItemsCollection.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/ListItem.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/ResText.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/Sprite.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Color.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Point.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Size.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Screen.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/items/UIMenuItem.ts"]}
