{"code":"import * as alt from 'alt';\r\nimport * as game from 'natives';\r\nimport { View } from '../Utilities/View';\r\nimport { Animation } from '../Utilities/Animation';\r\nimport { VehicleHelper } from './VehicleHelper';\r\nimport { Calculation } from '../Utilities/Calculation';\r\nimport { NativeNotification } from '../Notify/NativeNotification';\r\nimport { nativeNotificationType } from 'client/modules/Constant/Notification/NativeNotificationType';\r\nimport { VehicleDoor } from 'client/modules/Enum/VehicleDoor';\r\nimport { interactionConfig } from 'client/modules/Configs/InteractionConfig';\r\nexport default async () => {\r\n    let webView;\r\n    let vehicle;\r\n    let vehicleTransformData;\r\n    const player = alt.Player.local;\r\n    alt.onServer('player:enterVehicle', playerEnterVehicle);\r\n    let doorLockState;\r\n    (function (doorLockState) {\r\n        doorLockState[doorLockState[\"Open\"] = 1] = \"Open\";\r\n        doorLockState[doorLockState[\"Closed\"] = 3] = \"Closed\";\r\n    })(doorLockState || (doorLockState = {}));\r\n    alt.on('interaction2D:vehicle', async (vehicleScriptID) => {\r\n        const vehicleRange = alt.Vehicle.all.find(x => x.scriptID === vehicleScriptID);\r\n        if (vehicleRange === null || vehicleRange === undefined)\r\n            return;\r\n        if (player.vehicle != null)\r\n            return;\r\n        const vehicleData = vehicleRange.getSyncedMeta('vehicle:syncedData');\r\n        if (vehicleData === null || vehicleData === undefined)\r\n            return;\r\n        if (!webView) {\r\n            webView = new View();\r\n        }\r\n        if (alt.Player.local.getMeta('viewOpen'))\r\n            return;\r\n        vehicle = vehicleRange;\r\n        vehicleTransformData = vehicleData;\r\n        webView.open('', true, 'vehicle/interaction');\r\n        webView.on('cef-vehicle-interaction:openVehicle', openDoorLockVehicle);\r\n        webView.on('cef-vehicle-interaction:openDoor', openVehicleDoor);\r\n    });\r\n    alt.on('keyup', async (key) => {\r\n        if (key === interactionConfig.interactionKeyIntoVehicle) {\r\n            if (player.vehicle == null)\r\n                return;\r\n            const vehicleData = player.vehicle.getSyncedMeta('vehicle:syncedData');\r\n            if (vehicleData === null || vehicleData === undefined)\r\n                return;\r\n            if (!webView) {\r\n                webView = new View();\r\n            }\r\n            if (alt.Player.local.getMeta('viewOpen') || alt.Player.local.getMeta('chatOpen'))\r\n                return;\r\n            if (game.getPedInVehicleSeat(player.vehicle.scriptID, -1, 1) !== player.scriptID)\r\n                return;\r\n            vehicleTransformData = vehicleData;\r\n            webView.open('', true, 'vehicle/interaction/into', true);\r\n            webView.on('cef-vehicle-interaction:turnEngine', turnVehicleEngine);\r\n            webView.on('cef-vehicle-interaction:getVehicleInfo', getVehicleInfo);\r\n        }\r\n    });\r\n    async function openDoorLockVehicle() {\r\n        webView.close();\r\n        if (vehicle.scriptID === null || vehicle.scriptID === undefined)\r\n            return;\r\n        if (!VehicleHelper.isVehicleOwner(vehicleTransformData, player)) {\r\n            return NativeNotification.showNotification(null, nativeNotificationType.LockSystem, 0, 'Nie posiadasz kluczy', '~g~ Zamek centralny', 'Aby otworzyć ten pojazd musisz posiadać do niego klucze', 1);\r\n        }\r\n        const animation = new Animation('anim@mp_player_intmenu@key_fob@', 'fob_click_fp', 200);\r\n        await animation.loadAnimDictAsync();\r\n        if (game.getVehicleDoorLockStatus(vehicle.scriptID) !== doorLockState.Closed) {\r\n            game.setVehicleDoorsLocked(vehicle.scriptID, 3);\r\n            animation.playAnim();\r\n            return NativeNotification.showNotification(null, nativeNotificationType.LockSystem, 0, 'Pojazd został zamknięty', '~g~ Zamek centralny', 'Twój pojazd zostal zamknięty', 1);\r\n        }\r\n        game.setVehicleDoorsLocked(vehicle.scriptID, 1);\r\n        animation.playAnim();\r\n        return NativeNotification.showNotification(null, nativeNotificationType.LockSystem, 0, 'Pojazd został otwarty', '~g~ Zamek centralny', 'Twój pojazd zostal otwarty', 1);\r\n    }\r\n    async function openVehicleDoor(door) {\r\n        webView.close();\r\n        if (vehicle.scriptID === null || vehicle.scriptID === undefined)\r\n            return;\r\n        if (VehicleHelper.isVehicleLocked(vehicle)) {\r\n            return NativeNotification.showNotification(null, nativeNotificationType.LockSystem, 0, 'Ten pojazd jest zamknięty', '~g~ Zamek centralny', 'Aby wykonać tą operację musisz go otworzyć', 1);\r\n        }\r\n        if (VehicleHelper.isVehicleOwner(vehicleTransformData, player)) {\r\n            if (VehicleHelper.isDoorOpen(vehicle, door)) {\r\n                game.setVehicleDoorShut(vehicle.scriptID, door, false);\r\n            }\r\n            else {\r\n                game.setVehicleDoorOpen(vehicle.scriptID, door, false, false);\r\n            }\r\n            if (door === VehicleDoor.Trunk && VehicleHelper.isTrunkOpenGetter(vehicle)) {\r\n                VehicleHelper.isTrunkOpenSetter(vehicle, false);\r\n                alt.emitServer('vehicle-interaction:closeTrunkRequest', vehicle);\r\n            }\r\n            else if (door === VehicleDoor.Trunk && !VehicleHelper.isTrunkOpenGetter(vehicle)) {\r\n                VehicleHelper.isTrunkOpenSetter(vehicle, true);\r\n                alt.emitServer('vehicle-interaction:openTrunkRequest', vehicle, JSON.stringify(Calculation.getEntityRearPosition(vehicle.scriptID)));\r\n            }\r\n        }\r\n        else {\r\n            alt.emit('notify:error', 'Wystąpił bląd!', 'Nie masz uprawnień do otwierania lub zamykania drzwi');\r\n        }\r\n    }\r\n    async function playerEnterVehicle(seat) {\r\n        if (seat === 1) {\r\n            game.setPedConfigFlag(player.scriptID, 429, true);\r\n        }\r\n    }\r\n    async function turnVehicleEngine() {\r\n        webView.close();\r\n        if (player.vehicle === null || player.vehicle === undefined) {\r\n            return alt.emit('notify:error', null, 'Musisz znajdywać się w pojeździe, aby wykonać tą operacje');\r\n        }\r\n        if (!VehicleHelper.isVehicleOwner(vehicleTransformData, player)) {\r\n            return NativeNotification.showNotification(null, nativeNotificationType.LockSystem, 0, 'Nie posiadasz kluczy', '~g~ Zamek centralny', 'Aby odpalić ten pojazd musisz posiadać do niego klucze', 1);\r\n        }\r\n        if (VehicleHelper.isVehicleEngineBroken(player.vehicle)) {\r\n            const fireProbability = Calculation.probability(30);\r\n            if (fireProbability) {\r\n                alt.setTimeout(() => {\r\n                    const playerLastVehicle = game.getVehiclePedIsIn(player.scriptID, true);\r\n                    const playerLastVehiclePos = game.getEntityCoords(playerLastVehicle, true);\r\n                    game.addExplosion(playerLastVehiclePos.x, playerLastVehiclePos.y, playerLastVehiclePos.z, 19, 10.5, true, false, 1.0, true);\r\n                    alt.setTimeout(() => {\r\n                        game.addExplosion(playerLastVehiclePos.x, playerLastVehiclePos.y, playerLastVehiclePos.z, 3, 10.5, true, false, 1.0, false);\r\n                    }, 5000);\r\n                }, 2000);\r\n                if (game.getIsVehicleEngineRunning(player.vehicle.scriptID)) {\r\n                    game.setVehicleHandbrake(vehicle.scriptID, true);\r\n                }\r\n                return;\r\n            }\r\n            if (!game.getIsVehicleEngineRunning(player.vehicle.scriptID)) {\r\n                NativeNotification.showNotification(null, nativeNotificationType.LockSystem, 0, 'Próbuje odpalić silnik', '~g~ Stacyjka', 'Coś w samochodzie nie gra, podjedź do mechanika', 1);\r\n                const engineOnProbability = Calculation.probability(50);\r\n                if (!engineOnProbability) {\r\n                    alt.setTimeout(() => {\r\n                        NativeNotification.showNotification(null, nativeNotificationType.Error, 0, 'Próba nieudana', '~g~ Stacyjka', 'Spróbuj odpalić samochód ponownie', 1);\r\n                    }, 2000);\r\n                    return;\r\n                }\r\n                alt.setTimeout(() => {\r\n                    return game.setVehicleEngineOn(player.vehicle.scriptID, true, false, true);\r\n                }, 2000);\r\n            }\r\n        }\r\n        if (!game.getIsVehicleEngineRunning(player.vehicle.scriptID) && !VehicleHelper.isVehicleEngineBroken(player.vehicle)) {\r\n            return game.setVehicleEngineOn(player.vehicle.scriptID, true, false, true);\r\n        }\r\n        return game.setVehicleEngineOn(player.vehicle.scriptID, false, false, true);\r\n    }\r\n    async function getVehicleInfo() {\r\n        webView.close();\r\n        alt.emitServer('vehicle-interaction:getVehicleInfo');\r\n    }\r\n};\r\n","references":["B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Constant/Keys/Key.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Core/Utilities/View.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Models/vehicle.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Core/Utilities/Animation.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Core/Vehicle/VehicleHelper.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Core/Utilities/Calculation.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Core/Notify/NativeNotification.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Constant/Notification/NativeNotificationType.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Enum/VehicleDoor.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Configs/InteractionConfig.ts"]}
