{"code":"import ResRectangle from \"../modules/ResRectangle\";\r\nimport Sprite from \"../modules/Sprite\";\r\nimport Color from \"../utils/Color\";\r\nimport Point from \"../utils/Point\";\r\nimport Size from \"../utils/Size\";\r\nimport UIMenuItem from \"./UIMenuItem\";\r\nexport default class UIMenuSliderItem extends UIMenuItem {\r\n    get Index() {\r\n        return this._index % this._items.length;\r\n    }\r\n    set Index(value) {\r\n        this._index = 100000000 - (100000000 % this._items.length) + value;\r\n    }\r\n    constructor(text, items, index, description = \"\", divider = false, data = null) {\r\n        super(text, description, data);\r\n        const y = 0;\r\n        this._items = items;\r\n        this._arrowLeft = new Sprite(\"commonmenutu\", \"arrowleft\", new Point(0, 105 + y), new Size(15, 15));\r\n        this._arrowRight = new Sprite(\"commonmenutu\", \"arrowright\", new Point(0, 105 + y), new Size(15, 15));\r\n        this._rectangleBackground = new ResRectangle(new Point(0, 0), new Size(150, 9), new Color(4, 32, 57, 255));\r\n        this._rectangleSlider = new ResRectangle(new Point(0, 0), new Size(75, 9), new Color(57, 116, 200, 255));\r\n        if (divider) {\r\n            this._rectangleDivider = new ResRectangle(new Point(0, 0), new Size(2.5, 20), Color.WhiteSmoke);\r\n        }\r\n        else {\r\n            this._rectangleDivider = new ResRectangle(new Point(0, 0), new Size(2.5, 20), Color.Transparent);\r\n        }\r\n        this.Index = index;\r\n    }\r\n    SetVerticalPosition(y) {\r\n        this._rectangleBackground.Pos = new Point(250 + this.Offset.X + this.Parent.WidthOffset, y + 158.5 + this.Offset.Y);\r\n        this._rectangleSlider.Pos = new Point(250 + this.Offset.X + this.Parent.WidthOffset, y + 158.5 + this.Offset.Y);\r\n        this._rectangleDivider.Pos = new Point(323.5 + this.Offset.X + this.Parent.WidthOffset, y + 153 + this.Offset.Y);\r\n        this._arrowLeft.Pos = new Point(235 + this.Offset.X + this.Parent.WidthOffset, 155.5 + y + this.Offset.Y);\r\n        this._arrowRight.Pos = new Point(400 + this.Offset.X + this.Parent.WidthOffset, 155.5 + y + this.Offset.Y);\r\n        super.SetVerticalPosition(y);\r\n    }\r\n    IndexToItem(index) {\r\n        return this._items[index];\r\n    }\r\n    Draw() {\r\n        super.Draw();\r\n        this._arrowLeft.Color = this.Enabled\r\n            ? this.Selected\r\n                ? Color.Black\r\n                : Color.WhiteSmoke\r\n            : new Color(163, 159, 148);\r\n        this._arrowRight.Color = this.Enabled\r\n            ? this.Selected\r\n                ? Color.Black\r\n                : Color.WhiteSmoke\r\n            : new Color(163, 159, 148);\r\n        let offset = ((this._rectangleBackground.Size.Width - this._rectangleSlider.Size.Width) / (this._items.length - 1)) * this.Index;\r\n        this._rectangleSlider.Pos = new Point(250 + this.Offset.X + offset + +this.Parent.WidthOffset, this._rectangleSlider.Pos.Y);\r\n        if (this.Selected) {\r\n            this._arrowLeft.Draw();\r\n            this._arrowRight.Draw();\r\n        }\r\n        this._rectangleBackground.Draw();\r\n        this._rectangleSlider.Draw();\r\n        this._rectangleDivider.Draw();\r\n    }\r\n    SetRightBadge(badge) { }\r\n    SetRightLabel(text) { }\r\n}\r\n","references":["B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/enums/BadgeStyle.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/ResRectangle.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/Sprite.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Color.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Point.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Size.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/items/UIMenuItem.ts"]}
