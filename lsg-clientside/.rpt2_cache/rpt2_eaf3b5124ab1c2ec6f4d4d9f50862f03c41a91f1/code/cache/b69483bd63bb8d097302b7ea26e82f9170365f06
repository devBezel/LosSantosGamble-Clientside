{"code":"import * as alt from 'alt';\r\nimport { Key } from 'client/modules/Constant/Keys/Key';\r\nimport { View } from '../Utilities/View';\r\nimport { Calculation } from '../Utilities/Calculation';\r\nexport default async () => {\r\n    const player = alt.Player.local;\r\n    let webView;\r\n    alt.on('keyup', async (key) => {\r\n        if (key === Key.ESCAPE) {\r\n            if (webView === null || webView === undefined) {\r\n                return;\r\n            }\r\n            webView.close();\r\n        }\r\n    });\r\n    alt.on('keyup', async (key) => {\r\n        if (player.getMeta('viewOpen'))\r\n            return;\r\n        if (key === Key.I) {\r\n            alt.emitServer('inventory:getItems');\r\n        }\r\n    });\r\n    alt.onServer('inventory:items', openInventoryWidnow);\r\n    alt.onServer('inventory:sendRequestOffer', sendRequestOffer);\r\n    async function openInventoryWidnow(items, usedItem) {\r\n        if (!webView) {\r\n            webView = new View();\r\n        }\r\n        if (alt.Player.local.getMeta('viewOpen'))\r\n            return;\r\n        webView.open('', true, 'inventory', true);\r\n        webView.emit('inventory:items', items);\r\n        webView.on('inventory:useItem', useItem);\r\n        webView.on('inventory:offerItem', offerItem);\r\n    }\r\n    async function useItem(id) {\r\n        webView.close();\r\n        alt.emitServer('inventory:useItem', id);\r\n    }\r\n    async function offerItem(item, playerID, costItem) {\r\n        const getter = alt.Player.all.find((x) => x.getSyncedMeta('account:id') === playerID);\r\n        if (getter === undefined || player === null) {\r\n            return alt.emit('notify:error', 'Nie ma takiego gracza', 'Gracz o podanym ID nie znajduje się w grze');\r\n        }\r\n        const isInRange = Calculation.isPlayerInRange(alt.Player.local.pos, getter.pos, 3);\r\n        if (!isInRange) {\r\n            webView.close();\r\n            return alt.emit('notify:error', 'Brak gracza w pobliżu', `Gracza o ID: ${playerID} nie ma w pobliżu`);\r\n        }\r\n        alt.emitServer('inventory:offerPlayerItem', JSON.stringify(item), getter, costItem);\r\n    }\r\n    async function sendRequestOffer(item, cost, sender) {\r\n        if (webView) {\r\n            webView.close();\r\n        }\r\n        if (!webView) {\r\n            webView = new View();\r\n        }\r\n        webView.open('', true, 'offer/request', true);\r\n        webView.emit('inventory:requestOffer', { item, cost, sender });\r\n        webView.on('inventory:offerRequestResult', offerRequestResult);\r\n    }\r\n    async function offerRequestResult(offerItemData, accept) {\r\n        webView.close();\r\n        alt.emitServer('inventory:offerRequestResult', JSON.stringify(offerItemData.item), offerItemData.cost, offerItemData.sender, accept);\r\n    }\r\n};\r\n","references":["B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Constant/Keys/Key.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Models/Item.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Core/Utilities/View.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Core/Utilities/Calculation.ts"]}
