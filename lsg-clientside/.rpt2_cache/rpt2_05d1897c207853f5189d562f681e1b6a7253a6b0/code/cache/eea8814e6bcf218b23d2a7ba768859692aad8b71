{"code":"import Font from \"../enums/Font\";\r\nimport Alignment from \"../enums/Alignment\";\r\nimport ResText from \"../modules/ResText\";\r\nimport Sprite from \"../modules/Sprite\";\r\nimport Color from \"../utils/Color\";\r\nimport Point from \"../utils/Point\";\r\nimport Size from \"../utils/Size\";\r\nimport Screen from \"../utils/Screen\";\r\nimport UIMenuItem from \"./UIMenuItem\";\r\nexport default class UIMenuAutoListItem extends UIMenuItem {\r\n    constructor(text, description = \"\", lowerThreshold = 0, upperThreshold = 10, startValue = 0, data = null) {\r\n        super(text, description, data);\r\n        this._currentOffset = 0;\r\n        this._leftMoveThreshold = 1;\r\n        this._rightMoveThreshold = 1;\r\n        this._lowerThreshold = 0;\r\n        this._upperThreshold = 10;\r\n        this._preCaptionText = '';\r\n        let y = 0;\r\n        this.LowerThreshold = lowerThreshold;\r\n        this.UpperThreshold = lowerThreshold > upperThreshold ? lowerThreshold : upperThreshold;\r\n        this.SelectedValue = (startValue < lowerThreshold || startValue > upperThreshold) ? lowerThreshold : startValue;\r\n        this._arrowLeft = new Sprite(\"commonmenu\", \"arrowleft\", new Point(110, 105 + y), new Size(30, 30));\r\n        this._arrowRight = new Sprite(\"commonmenu\", \"arrowright\", new Point(280, 105 + y), new Size(30, 30));\r\n        this._itemText = new ResText(\"\", new Point(290, y + 104), 0.35, Color.White, Font.ChaletLondon, Alignment.Right);\r\n    }\r\n    get PreCaptionText() {\r\n        return this._preCaptionText;\r\n    }\r\n    set PreCaptionText(text) {\r\n        if (!text)\r\n            throw new Error(\"The pre caption text can't be null\");\r\n        if (typeof text !== 'string')\r\n            throw new Error(\"The pre caption text must be a string\");\r\n        this._preCaptionText = text;\r\n        this._currentOffset = Screen.GetTextWidth(this.PreCaptionText + this._selectedValue.toString(), this._itemText && this._itemText.Font ? this._itemText.Font : 0, 0.35);\r\n    }\r\n    get LeftMoveThreshold() {\r\n        return this._leftMoveThreshold;\r\n    }\r\n    set LeftMoveThreshold(value) {\r\n        if (!value)\r\n            throw new Error(\"The left threshold can't be null\");\r\n        this._leftMoveThreshold = value;\r\n    }\r\n    get RightMoveThreshold() {\r\n        return this._rightMoveThreshold;\r\n    }\r\n    set RightMoveThreshold(value) {\r\n        if (!value)\r\n            throw new Error(\"The right threshold can't be null\");\r\n        this._rightMoveThreshold = value;\r\n    }\r\n    get LowerThreshold() {\r\n        return this._lowerThreshold;\r\n    }\r\n    set LowerThreshold(value) {\r\n        if (typeof value !== 'number' && !value)\r\n            throw new Error(\"The lower threshold can't be null\");\r\n        this._lowerThreshold = value;\r\n        if (this.SelectedValue < value) {\r\n            this.SelectedValue = value;\r\n        }\r\n    }\r\n    get UpperThreshold() {\r\n        return this._upperThreshold;\r\n    }\r\n    set UpperThreshold(value) {\r\n        if (typeof value !== 'number' && !value)\r\n            throw new Error(\"The upper threshold can't be null\");\r\n        this._upperThreshold = value;\r\n        if (this.SelectedValue > value) {\r\n            this.SelectedValue = value;\r\n        }\r\n    }\r\n    get SelectedValue() {\r\n        return this._selectedValue;\r\n    }\r\n    set SelectedValue(value) {\r\n        if (value < this._lowerThreshold || value > this._upperThreshold)\r\n            throw new Error(\"The value can not be outside the lower or upper limits\");\r\n        this._selectedValue = value;\r\n        this._currentOffset = Screen.GetTextWidth(this.PreCaptionText + this._selectedValue.toString(), this._itemText && this._itemText.Font ? this._itemText.Font : 0, this._itemText && this._itemText.Scale ? this._itemText.Scale : 0.35);\r\n    }\r\n    SetVerticalPosition(y) {\r\n        this._arrowLeft.Pos = new Point(300 + this.Offset.X + this.Parent.WidthOffset, 147 + y + this.Offset.Y);\r\n        this._arrowRight.Pos = new Point(400 + this.Offset.X + this.Parent.WidthOffset, 147 + y + this.Offset.Y);\r\n        this._itemText.Pos = new Point(300 + this.Offset.X + this.Parent.WidthOffset, y + 147 + this.Offset.Y);\r\n        super.SetVerticalPosition(y);\r\n    }\r\n    SetRightLabel(text) {\r\n        return this;\r\n    }\r\n    SetRightBadge(badge) {\r\n        return this;\r\n    }\r\n    Draw() {\r\n        super.Draw();\r\n        const offset = this._currentOffset;\r\n        this._itemText.Color = this.Enabled\r\n            ? this.Selected\r\n                ? this.HighlightedForeColor\r\n                : this.ForeColor\r\n            : new Color(163, 159, 148);\r\n        this._itemText.Caption = this.PreCaptionText + this._selectedValue;\r\n        this._arrowLeft.Color = this.Enabled\r\n            ? this.Selected\r\n                ? this.HighlightedForeColor\r\n                : this.ForeColor\r\n            : new Color(163, 159, 148);\r\n        this._arrowRight.Color = this.Enabled\r\n            ? this.Selected\r\n                ? this.HighlightedForeColor\r\n                : this.ForeColor\r\n            : new Color(163, 159, 148);\r\n        this._arrowLeft.Pos = new Point(380 - offset + this.Offset.X + this.Parent.WidthOffset, this._arrowLeft.Pos.Y);\r\n        if (this.Selected) {\r\n            this._arrowLeft.Draw();\r\n            this._arrowRight.Draw();\r\n            this._itemText.Pos = new Point(405 + this.Offset.X + this.Parent.WidthOffset, this._itemText.Pos.Y);\r\n        }\r\n        else {\r\n            this._itemText.Pos = new Point(420 + this.Offset.X + this.Parent.WidthOffset, this._itemText.Pos.Y);\r\n        }\r\n        this._itemText.Draw();\r\n    }\r\n}\r\n","references":["B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/enums/BadgeStyle.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/enums/Font.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/enums/Alignment.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/ResText.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/Sprite.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Color.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Point.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Size.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Screen.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/items/UIMenuItem.ts"]}
