{"code":"import * as game from 'natives';\r\nexport var Context;\r\n(function (Context) {\r\n    Context[Context[\"Other\"] = 6] = \"Other\";\r\n    Context[Context[\"Gameload\"] = 3] = \"Gameload\";\r\n    Context[Context[\"GameloadNews\"] = 4] = \"GameloadNews\";\r\n    Context[Context[\"PcLanding\"] = 5] = \"PcLanding\";\r\n})(Context || (Context = {}));\r\nexport class LoadingScreen {\r\n    constructor() {\r\n        this.handle = game.requestScaleformMovie('loadingscreen_startup');\r\n    }\r\n    destroy() {\r\n        game.setScaleformMovieAsNoLongerNeeded(this.handle);\r\n    }\r\n    isLoaded() {\r\n        return game.hasScaleformMovieLoaded(this.handle);\r\n    }\r\n    setContext(context) {\r\n        game.beginScaleformMovieMethod(this.handle, 'SET_CONTEXT');\r\n        game.scaleformMovieMethodAddParamInt(context);\r\n        game.endScaleformMovieMethod();\r\n    }\r\n    setProgressText(progressText) {\r\n        game.beginScaleformMovieMethod(this.handle, 'SET_PROGRESS_TEXT');\r\n        game.scaleformMovieMethodAddParamPlayerNameString(progressText);\r\n        game.endScaleformMovieMethod();\r\n    }\r\n    setProgressTitle(progressTitle) {\r\n        game.beginScaleformMovieMethod(this.handle, 'SET_PROGRESS_TITLE');\r\n        game.scaleformMovieMethodAddParamPlayerNameString(progressTitle);\r\n        game.endScaleformMovieMethod();\r\n    }\r\n    draw() {\r\n        game.callScaleformMovieMethod(this.handle, 'STARTUP_ANIMATED_LOADINGSCREENS');\r\n        game.drawScaleformMovieFullscreen(this.handle, 255, 255, 255, 255, 0);\r\n    }\r\n}\r\nexport var SpinnerType;\r\n(function (SpinnerType) {\r\n    SpinnerType[SpinnerType[\"Clockwise1\"] = 1] = \"Clockwise1\";\r\n    SpinnerType[SpinnerType[\"Clockwise2\"] = 2] = \"Clockwise2\";\r\n    SpinnerType[SpinnerType[\"Clockwise3\"] = 3] = \"Clockwise3\";\r\n    SpinnerType[SpinnerType[\"SocialClubSaving\"] = 4] = \"SocialClubSaving\";\r\n    SpinnerType[SpinnerType[\"RegularClockwise\"] = 5] = \"RegularClockwise\";\r\n})(SpinnerType || (SpinnerType = {}));\r\nexport class Loading {\r\n    static get isActive() {\r\n        return game.busyspinnerIsOn();\r\n    }\r\n    static show(text, spinnerType = SpinnerType.RegularClockwise) {\r\n        Loading.hide();\r\n        if (text == null) {\r\n            return;\r\n        }\r\n        game.beginTextCommandBusyspinnerOn('STRING');\r\n        game.addTextComponentSubstringPlayerName(text);\r\n        game.endTextCommandBusyspinnerOn(spinnerType);\r\n    }\r\n    static hide() {\r\n        if (Loading.isActive) {\r\n            game.busyspinnerOff();\r\n        }\r\n    }\r\n}\r\n","references":[]}
