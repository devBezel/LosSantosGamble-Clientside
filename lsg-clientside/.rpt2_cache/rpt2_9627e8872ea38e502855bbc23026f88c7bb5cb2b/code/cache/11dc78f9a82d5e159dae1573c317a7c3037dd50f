{"code":"import * as alt from 'alt';\r\nimport game from 'natives';\r\nimport BadgeStyle from './enums/BadgeStyle';\r\nimport Font from './enums/Font';\r\nimport Alignment from './enums/Alignment';\r\nimport Control from './enums/Control';\r\nimport HudColor from './enums/HudColor';\r\nimport ChangeDirection from './enums/ChangeDirection';\r\nimport UIMenuCheckboxItem from './items/UIMenuCheckboxItem';\r\nimport UIMenuItem from './items/UIMenuItem';\r\nimport UIMenuListItem from './items/UIMenuListItem';\r\nimport UIMenuAutoListItem from './items/UIMenuAutoListItem';\r\nimport UIMenuSliderItem from './items/UIMenuSliderItem';\r\nimport Container from './modules/Container';\r\nimport ItemsCollection from './modules/ItemsCollection';\r\nimport ListItem from './modules/ListItem';\r\nimport ResRectangle from './modules/ResRectangle';\r\nimport ResText from './modules/ResText';\r\nimport Sprite from './modules/Sprite';\r\nimport Color from './utils/Color';\r\nimport Common from './utils/Common';\r\nimport LiteEvent from './utils/LiteEvent';\r\nimport Point from './utils/Point';\r\nimport Size from './utils/Size';\r\nimport UUIDV4 from './utils/UUIDV4';\r\nimport Screen from './utils/Screen';\r\nimport InstructionalButton from './modules/InstructionalButton';\r\nimport Scaleform from './utils/Scaleform';\r\nimport BigMessage from './modules/BigMessage';\r\nimport MidsizedMessage from './modules/MidsizedMessage';\r\nimport UIMenuDynamicListItem from './items/UIMenuDynamicListItem';\r\nlet menuPool = [];\r\nexport default class NativeUI {\r\n    constructor(title, subtitle, offset, spriteLibrary, spriteName) {\r\n        this._visible = true;\r\n        this._counterPretext = '';\r\n        this._counterOverride = undefined;\r\n        this._lastUpDownNavigation = 0;\r\n        this._lastLeftRightNavigation = 0;\r\n        this._extraOffset = 0;\r\n        this._buttonsEnabled = true;\r\n        this._justOpened = true;\r\n        this._justOpenedFromPool = false;\r\n        this._justClosedFromPool = false;\r\n        this._poolOpening = null;\r\n        this._safezoneOffset = new Point(0, 0);\r\n        this._activeItem = 1000;\r\n        this._maxItemsOnScreen = 9;\r\n        this._maxItem = this._maxItemsOnScreen;\r\n        this._mouseEdgeEnabled = true;\r\n        this._bannerSprite = null;\r\n        this._bannerRectangle = null;\r\n        this._recalculateDescriptionNextFrame = 1;\r\n        this._instructionalButtons = [];\r\n        this._defaultTitleScale = 1.15;\r\n        this._maxMenuItems = 1000;\r\n        this.Id = UUIDV4();\r\n        this.SelectTextLocalized = alt.getGxtText('HUD_INPUT2');\r\n        this.BackTextLocalized = alt.getGxtText('HUD_INPUT3');\r\n        this.WidthOffset = 0;\r\n        this.ParentMenu = null;\r\n        this.ParentItem = null;\r\n        this.MouseControlsEnabled = false;\r\n        this.AUDIO_LIBRARY = 'HUD_FRONTEND_DEFAULT_SOUNDSET';\r\n        this.AUDIO_UPDOWN = 'NAV_UP_DOWN';\r\n        this.AUDIO_LEFTRIGHT = 'NAV_LEFT_RIGHT';\r\n        this.AUDIO_SELECT = 'SELECT';\r\n        this.AUDIO_BACK = 'BACK';\r\n        this.AUDIO_ERROR = 'ERROR';\r\n        this.MenuItems = [];\r\n        this.IndexChange = new LiteEvent();\r\n        this.ListChange = new LiteEvent();\r\n        this.AutoListChange = new LiteEvent();\r\n        this.DynamicListChange = new LiteEvent();\r\n        this.SliderChange = new LiteEvent();\r\n        this.CheckboxChange = new LiteEvent();\r\n        this.ItemSelect = new LiteEvent();\r\n        this.MenuOpen = new LiteEvent();\r\n        this.MenuClose = new LiteEvent();\r\n        this.MenuChange = new LiteEvent();\r\n        if (!(offset instanceof Point))\r\n            offset = Point.Parse(offset);\r\n        this._spriteLibrary = spriteLibrary || 'commonmenu';\r\n        this._spriteName = spriteName || 'interaction_bgd';\r\n        this._offset = new Point(offset.X, offset.Y);\r\n        this.Children = new Map();\r\n        this._instructionalButtonsScaleform = new Scaleform('instructional_buttons');\r\n        this.UpdateScaleform();\r\n        this._mainMenu = new Container(new Point(0, 0), new Size(700, 500), new Color(0, 0, 0, 0));\r\n        this._bannerSprite = new Sprite(this._spriteLibrary, this._spriteName, new Point(0 + this._offset.X, 0 + this._offset.Y), new Size(431, 107));\r\n        this._mainMenu.addItem((this._titleResText = new ResText(title, new Point(215 + this._offset.X, 20 + this._offset.Y), this._defaultTitleScale, new Color(255, 255, 255), 1, Alignment.Centered)));\r\n        if (subtitle !== '') {\r\n            this._mainMenu.addItem(new ResRectangle(new Point(0 + this._offset.X, 107 + this._offset.Y), new Size(431, 37), new Color(0, 0, 0, 255)));\r\n            this._mainMenu.addItem((this._subtitleResText = new ResText(subtitle, new Point(8 + this._offset.X, 110 + this._offset.Y), 0.35, new Color(255, 255, 255), 0, Alignment.Left)));\r\n            if (subtitle.startsWith('~')) {\r\n                this._counterPretext = subtitle.substr(0, 3);\r\n            }\r\n            this._counterText = new ResText('', new Point(425 + this._offset.X, 110 + this._offset.Y), 0.35, new Color(255, 255, 255), 0, Alignment.Right);\r\n            this._extraOffset += 37;\r\n        }\r\n        this._upAndDownSprite = new Sprite('commonmenu', 'shop_arrows_upanddown', new Point(190 + this._offset.X, 147 + 37 * (this._maxItemsOnScreen + 1) + this._offset.Y - 37 + this._extraOffset), new Size(50, 50));\r\n        this._extraRectangleUp = new ResRectangle(new Point(0 + this._offset.X, 144 + 38 * (this._maxItemsOnScreen + 1) + this._offset.Y - 37 + this._extraOffset), new Size(431, 18), new Color(0, 0, 0, 200));\r\n        this._extraRectangleDown = new ResRectangle(new Point(0 + this._offset.X, 144 + 18 + 38 * (this._maxItemsOnScreen + 1) + this._offset.Y - 37 + this._extraOffset), new Size(431, 18), new Color(0, 0, 0, 200));\r\n        this._descriptionBar = new ResRectangle(new Point(this._offset.X, 123), new Size(431, 4), Color.Black);\r\n        this._descriptionRectangle = new Sprite('commonmenu', 'gradient_bgd', new Point(this._offset.X, 127), new Size(431, 30));\r\n        this._descriptionText = new ResText('', new Point(this._offset.X + 5, 125), 0.35, new Color(255, 255, 255, 255), Font.ChaletLondon, Alignment.Left);\r\n        this._background = new Sprite('commonmenu', 'gradient_bgd', new Point(this._offset.X, 144 + this._offset.Y - 37 + this._extraOffset), new Size(290, 25));\r\n        this._visible = false;\r\n        alt.everyTick(this.render.bind(this));\r\n    }\r\n    GetSpriteBanner() {\r\n        return this._bannerSprite;\r\n    }\r\n    GetRectangleBanner() {\r\n        return this._bannerRectangle;\r\n    }\r\n    GetTitle() {\r\n        return this._titleResText;\r\n    }\r\n    get MaxItemsVisible() {\r\n        return this._maxItemsOnScreen;\r\n    }\r\n    set MaxItemsVisible(value) {\r\n        this._maxItemsOnScreen = value;\r\n    }\r\n    get Title() {\r\n        return this._titleResText.Caption;\r\n    }\r\n    set Title(text) {\r\n        this._titleResText.Caption = text;\r\n    }\r\n    get GetSubTitle() {\r\n        return this._titleResText;\r\n    }\r\n    get SubTitle() {\r\n        return this._titleResText.Caption;\r\n    }\r\n    set SubTitle(text) {\r\n        this._subtitleResText.Caption = text;\r\n    }\r\n    get Visible() {\r\n        return this._visible;\r\n    }\r\n    set Visible(toggle) {\r\n        this._visible = toggle;\r\n        Common.PlaySound(this.AUDIO_BACK, this.AUDIO_LIBRARY);\r\n        this.UpdateScaleform();\r\n        if (toggle) {\r\n            this.UpdateDescriptionCaption();\r\n        }\r\n        if (this._justOpenedFromPool === true) {\r\n            this._justOpenedFromPool = false;\r\n            return;\r\n        }\r\n        if (toggle) {\r\n            this._justOpened = true;\r\n            this.MenuOpen.emit();\r\n            if (this.ParentMenu === null) {\r\n                if (!menuPool.includes(this) && this !== this._poolOpening) {\r\n                    const previousMenu = (menuPool.length) ? menuPool[menuPool.length - 1] : null;\r\n                    menuPool.push(this);\r\n                    if (previousMenu !== this._poolOpening && previousMenu !== null) {\r\n                        previousMenu._justClosedFromPool = true;\r\n                        previousMenu.Visible = false;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (this._justClosedFromPool === true) {\r\n                this._justClosedFromPool = false;\r\n                return;\r\n            }\r\n            if (this.ParentMenu === null && menuPool.includes(this) && menuPool.length) {\r\n                if (menuPool[menuPool.length - 1] === this) {\r\n                    menuPool.pop();\r\n                    this._justOpenedFromPool = true;\r\n                    if (!menuPool.length) {\r\n                        this._poolOpening = null;\r\n                    }\r\n                }\r\n                if (menuPool.length) {\r\n                    this._poolOpening = menuPool[menuPool.length - 1];\r\n                    menuPool[menuPool.length - 1].Visible = true;\r\n                }\r\n            }\r\n            if (menuPool.length === 0) {\r\n                game.setMouseCursorSprite(1);\r\n            }\r\n        }\r\n    }\r\n    get CurrentSelection() {\r\n        return this._activeItem % this.MenuItems.length;\r\n    }\r\n    set CurrentSelection(v) {\r\n        this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;\r\n        this._activeItem = this._maxMenuItems - (this._maxMenuItems % this.MenuItems.length) + v;\r\n        if (this.CurrentSelection > this._maxItem) {\r\n            this._maxItem = this.CurrentSelection;\r\n            this._minItem = this.CurrentSelection - this._maxItemsOnScreen;\r\n        }\r\n        else if (this.CurrentSelection < this._minItem) {\r\n            this._maxItem = this._maxItemsOnScreen + this.CurrentSelection;\r\n            this._minItem = this.CurrentSelection;\r\n        }\r\n        this.IndexChange.emit(this.CurrentSelection, this.MenuItems[this._activeItem % this.MenuItems.length]);\r\n        this.UpdateDescriptionCaption();\r\n    }\r\n    DisableInstructionalButtons(disable) {\r\n        this._buttonsEnabled = !disable;\r\n    }\r\n    AddInstructionalButton(button) {\r\n        this._instructionalButtons.push(button);\r\n    }\r\n    SetSpriteBannerType(spriteBanner) {\r\n        this._bannerRectangle = null;\r\n        this.AddSpriteBannerType(spriteBanner);\r\n    }\r\n    SetRectangleBannerType(rectangle) {\r\n        this._bannerSprite = null;\r\n        this._bannerRectangle = rectangle;\r\n        this._bannerRectangle.Pos = new Point(this._offset.X, this._offset.Y);\r\n        this._bannerRectangle.Size = new Size(431 + this.WidthOffset, 107);\r\n    }\r\n    AddSpriteBannerType(spriteBanner) {\r\n        this._bannerSprite = spriteBanner;\r\n        this._bannerSprite.Size = new Size(431 + this.WidthOffset, 107);\r\n        this._bannerSprite.Pos = new Point(this._offset.X, this._offset.Y);\r\n    }\r\n    SetNoBannerType() {\r\n        this._bannerSprite = null;\r\n        this._bannerRectangle = new ResRectangle(new Point(this._offset.X, this._offset.Y), new Size(431 + this.WidthOffset, 107), new Color(0, 0, 0, 0));\r\n    }\r\n    RemoveInstructionalButton(button) {\r\n        for (let i = 0; i < this._instructionalButtons.length; i++) {\r\n            if (this._instructionalButtons[i] === button) {\r\n                this._instructionalButtons.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    RecalculateDescriptionPosition() {\r\n        const count = (this.MenuItems.length > this._maxItemsOnScreen + 1) ? this._maxItemsOnScreen + 2 : this.MenuItems.length;\r\n        this._descriptionBar.Size = new Size(431 + this.WidthOffset, 4);\r\n        this._descriptionRectangle.Size = new Size(431 + this.WidthOffset, 30);\r\n        this._descriptionBar.Pos = new Point(this._offset.X, 149 - 37 + this._extraOffset + this._offset.Y);\r\n        this._descriptionRectangle.Pos = new Point(this._offset.X, 149 - 37 + this._extraOffset + this._offset.Y);\r\n        this._descriptionText.Pos = new Point(this._offset.X + 8, 155 - 37 + this._extraOffset + this._offset.Y);\r\n        this._descriptionBar.Pos = new Point(this._offset.X, 38 * count + this._descriptionBar.Pos.Y);\r\n        this._descriptionRectangle.Pos = new Point(this._offset.X, 38 * count + this._descriptionRectangle.Pos.Y);\r\n        this._descriptionText.Pos = new Point(this._offset.X + 8, 38 * count + this._descriptionText.Pos.Y);\r\n    }\r\n    SetMenuWidthOffset(widthOffset) {\r\n        this.WidthOffset = widthOffset;\r\n        if (this._bannerSprite != null) {\r\n            this._bannerSprite.Size = new Size(431 + this.WidthOffset, 107);\r\n        }\r\n        this._mainMenu.Items[0].pos = new Point((this.WidthOffset + this._offset.X + 431) / 2, 20 + this._offset.Y);\r\n        if (this._counterText) {\r\n            this._counterText.Pos = new Point(425 + this._offset.X + widthOffset, 110 + this._offset.Y);\r\n        }\r\n        if (this._mainMenu.Items.length >= 2) {\r\n            const tmp = this._mainMenu.Items[1];\r\n            tmp.size = new Size(431 + this.WidthOffset, 37);\r\n        }\r\n        if (this._bannerRectangle != null) {\r\n            this._bannerRectangle.Size = new Size(431 + this.WidthOffset, 107);\r\n        }\r\n    }\r\n    AddItem(item) {\r\n        if (this._justOpened)\r\n            this._justOpened = false;\r\n        item.Offset = this._offset;\r\n        item.Parent = this;\r\n        item.SetVerticalPosition(this.MenuItems.length * 25 - 37 + this._extraOffset);\r\n        this.MenuItems.push(item);\r\n        this.RefreshIndex();\r\n    }\r\n    RemoveItem(item) {\r\n        for (let i = 0; i < this.MenuItems.length; i++) {\r\n            if (this.MenuItems[i] === item) {\r\n                this.MenuItems.splice(i, 1);\r\n            }\r\n        }\r\n        this.RefreshIndex();\r\n    }\r\n    RefreshIndex() {\r\n        if (this.MenuItems.length == 0) {\r\n            this._activeItem = this._maxMenuItems;\r\n            this._maxItem = this._maxItemsOnScreen;\r\n            this._minItem = 0;\r\n            return;\r\n        }\r\n        for (let i = 0; i < this.MenuItems.length; i++)\r\n            this.MenuItems[i].Selected = false;\r\n        this._activeItem = this._maxMenuItems - (this._maxMenuItems % this.MenuItems.length);\r\n        this._maxItem = this._maxItemsOnScreen;\r\n        this._minItem = 0;\r\n        if (this._visible) {\r\n            this.UpdateDescriptionCaption();\r\n        }\r\n    }\r\n    Clear() {\r\n        this.MenuItems = [];\r\n        this.RecalculateDescriptionPosition();\r\n    }\r\n    Open() {\r\n        this.Visible = true;\r\n    }\r\n    CleanUp(closeChildren = false) {\r\n        if (closeChildren) {\r\n            this.Children.forEach(m => {\r\n                m.Close(true);\r\n            });\r\n        }\r\n        this.MenuItems.filter(menuItem => menuItem instanceof UIMenuDynamicListItem).forEach((menuItem) => {\r\n            menuItem.SelectedValue = undefined;\r\n        });\r\n        this.RefreshIndex();\r\n    }\r\n    Close(closeChildren = false) {\r\n        this.Visible = false;\r\n        this.CleanUp(closeChildren);\r\n        this.MenuClose.emit(true);\r\n    }\r\n    GoLeft() {\r\n        if (!(this.MenuItems[this.CurrentSelection] instanceof UIMenuListItem) &&\r\n            !(this.MenuItems[this.CurrentSelection] instanceof UIMenuAutoListItem) &&\r\n            !(this.MenuItems[this.CurrentSelection] instanceof UIMenuDynamicListItem) &&\r\n            !(this.MenuItems[this.CurrentSelection] instanceof UIMenuSliderItem) ||\r\n            !this.MenuItems[this.CurrentSelection].Enabled)\r\n            return;\r\n        if (this.MenuItems[this.CurrentSelection] instanceof UIMenuListItem) {\r\n            const it = this.MenuItems[this.CurrentSelection];\r\n            if (it.Collection.length == 0)\r\n                return;\r\n            it.Index--;\r\n            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);\r\n            this.ListChange.emit(it, it.Index);\r\n        }\r\n        else if (this.MenuItems[this.CurrentSelection] instanceof UIMenuAutoListItem) {\r\n            const it = this.MenuItems[this.CurrentSelection];\r\n            if (it.SelectedValue <= it.LowerThreshold) {\r\n                it.SelectedValue = it.UpperThreshold;\r\n            }\r\n            else {\r\n                it.SelectedValue -= it.LeftMoveThreshold;\r\n            }\r\n            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);\r\n            this.AutoListChange.emit(it, it.SelectedValue, ChangeDirection.Left);\r\n        }\r\n        else if (this.MenuItems[this.CurrentSelection] instanceof UIMenuDynamicListItem) {\r\n            const it = this.MenuItems[this.CurrentSelection];\r\n            it.SelectionChangeHandlerPromise(it, it.SelectedValue, ChangeDirection.Left).then((newSelectedValue) => {\r\n                it.SelectedValue = newSelectedValue;\r\n                this.DynamicListChange.emit(it, it.SelectedValue, ChangeDirection.Left);\r\n            });\r\n            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);\r\n        }\r\n        else if (this.MenuItems[this.CurrentSelection] instanceof UIMenuSliderItem) {\r\n            const it = this.MenuItems[this.CurrentSelection];\r\n            it.Index = it.Index - 1;\r\n            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);\r\n            this.SliderChange.emit(it, it.Index, it.IndexToItem(it.Index));\r\n        }\r\n    }\r\n    GoRight() {\r\n        if (!(this.MenuItems[this.CurrentSelection] instanceof UIMenuListItem) &&\r\n            !(this.MenuItems[this.CurrentSelection] instanceof UIMenuAutoListItem) &&\r\n            !(this.MenuItems[this.CurrentSelection] instanceof UIMenuDynamicListItem) &&\r\n            !(this.MenuItems[this.CurrentSelection] instanceof UIMenuSliderItem) ||\r\n            !this.MenuItems[this.CurrentSelection].Enabled)\r\n            return;\r\n        if (this.MenuItems[this.CurrentSelection] instanceof UIMenuListItem) {\r\n            const it = this.MenuItems[this.CurrentSelection];\r\n            if (it.Collection.length == 0)\r\n                return;\r\n            it.Index++;\r\n            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);\r\n            this.ListChange.emit(it, it.Index);\r\n        }\r\n        else if (this.MenuItems[this.CurrentSelection] instanceof UIMenuAutoListItem) {\r\n            const it = this.MenuItems[this.CurrentSelection];\r\n            if (it.SelectedValue >= it.UpperThreshold) {\r\n                it.SelectedValue = it.LowerThreshold;\r\n            }\r\n            else {\r\n                it.SelectedValue += it.RightMoveThreshold;\r\n            }\r\n            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);\r\n            this.AutoListChange.emit(it, it.SelectedValue, ChangeDirection.Right);\r\n        }\r\n        else if (this.MenuItems[this.CurrentSelection] instanceof UIMenuDynamicListItem) {\r\n            const it = this.MenuItems[this.CurrentSelection];\r\n            it.SelectionChangeHandlerPromise(it, it.SelectedValue, ChangeDirection.Right).then((newSelectedValue) => {\r\n                it.SelectedValue = newSelectedValue;\r\n                this.DynamicListChange.emit(it, it.SelectedValue, ChangeDirection.Right);\r\n            });\r\n            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);\r\n        }\r\n        else if (this.MenuItems[this.CurrentSelection] instanceof UIMenuSliderItem) {\r\n            const it = this.MenuItems[this.CurrentSelection];\r\n            it.Index++;\r\n            Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);\r\n            this.SliderChange.emit(it, it.Index, it.IndexToItem(it.Index));\r\n        }\r\n    }\r\n    SelectItem() {\r\n        if (!this.MenuItems[this.CurrentSelection].Enabled) {\r\n            Common.PlaySound(this.AUDIO_ERROR, this.AUDIO_LIBRARY);\r\n            return;\r\n        }\r\n        const it = this.MenuItems[this.CurrentSelection];\r\n        if (this.MenuItems[this.CurrentSelection] instanceof UIMenuCheckboxItem) {\r\n            it.Checked = !it.Checked;\r\n            Common.PlaySound(this.AUDIO_SELECT, this.AUDIO_LIBRARY);\r\n            this.CheckboxChange.emit(it, it.Checked);\r\n        }\r\n        else {\r\n            Common.PlaySound(this.AUDIO_SELECT, this.AUDIO_LIBRARY);\r\n            this.ItemSelect.emit(it, this.CurrentSelection);\r\n            if (this.Children.has(it.Id)) {\r\n                const subMenu = this.Children.get(it.Id);\r\n                this.Visible = false;\r\n                subMenu.Visible = true;\r\n                this.MenuChange.emit(subMenu, true);\r\n            }\r\n        }\r\n        it.fireEvent();\r\n    }\r\n    HasCurrentSelectionChildren() {\r\n        const it = this.MenuItems[this.CurrentSelection];\r\n        if (this.MenuItems[this.CurrentSelection] instanceof UIMenuItem) {\r\n            if (this.Children.has(it.Id)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    IsMouseInListItemArrows(item, topLeft, safezone) {\r\n        game.beginTextCommandGetWidth('jamyfafi');\r\n        game.addTextComponentSubstringPlayerName(item.Text);\r\n        let res = Screen.ResolutionMaintainRatio;\r\n        let screenw = res.Width;\r\n        let screenh = res.Height;\r\n        const height = 1080.0;\r\n        const ratio = screenw / screenh;\r\n        let width = height * ratio;\r\n        const labelSize = game.endTextCommandGetWidth(false) * width * 0.35;\r\n        const labelSizeX = 5 + labelSize + 10;\r\n        const arrowSizeX = 431 - labelSizeX;\r\n        return Screen.IsMouseInBounds(topLeft, new Size(labelSizeX, 38))\r\n            ? 1\r\n            : Screen.IsMouseInBounds(new Point(topLeft.X + labelSizeX, topLeft.Y), new Size(arrowSizeX, 38))\r\n                ? 2\r\n                : 0;\r\n    }\r\n    ProcessMouse() {\r\n        if (!this.Visible || this._justOpened || this.MenuItems.length == 0 || !this.MouseControlsEnabled) {\r\n            this.MenuItems.filter(i => i.Hovered).forEach(i => (i.Hovered = false));\r\n            return;\r\n        }\r\n        alt.showCursor(true);\r\n        let limit = this.MenuItems.length - 1;\r\n        let counter = 0;\r\n        if (this.MenuItems.length > this._maxItemsOnScreen + 1)\r\n            limit = this._maxItem;\r\n        if (Screen.IsMouseInBounds(new Point(0, 0), new Size(30, 1080)) && this._mouseEdgeEnabled) {\r\n            game.setGameplayCamRelativeHeading(game.getGameplayCamRelativeHeading() + 5.0);\r\n            game.setMouseCursorSprite(6);\r\n        }\r\n        else if (Screen.IsMouseInBounds(new Point(Screen.ResolutionMaintainRatio.Width - 30.0, 0), new Size(30, 1080)) && this._mouseEdgeEnabled) {\r\n            game.setGameplayCamRelativeHeading(game.getGameplayCamRelativeHeading() - 5.0);\r\n            game.setMouseCursorSprite(7);\r\n        }\r\n        else if (this._mouseEdgeEnabled) {\r\n            game.setMouseCursorSprite(1);\r\n        }\r\n        for (let i = this._minItem; i <= limit; i++) {\r\n            let xpos = this._offset.X;\r\n            let ypos = this._offset.Y + 144 - 37 + this._extraOffset + counter * 38;\r\n            let yposSelected = this._offset.Y + 144 - 37 + this._extraOffset + this._safezoneOffset.Y + this.CurrentSelection * 38;\r\n            let xsize = 431 + this.WidthOffset;\r\n            const ysize = 38;\r\n            const uiMenuItem = this.MenuItems[i];\r\n            if (Screen.IsMouseInBounds(new Point(xpos, ypos), new Size(xsize, ysize))) {\r\n                uiMenuItem.Hovered = true;\r\n                const res = this.IsMouseInListItemArrows(this.MenuItems[i], new Point(xpos, ypos), 0);\r\n                if (uiMenuItem.Hovered && res == 1 && (this.MenuItems[i] instanceof UIMenuListItem || this.MenuItems[i] instanceof UIMenuAutoListItem || this.MenuItems[i] instanceof UIMenuDynamicListItem)) {\r\n                    game.setMouseCursorSprite(5);\r\n                }\r\n                if (game.isControlJustPressed(0, 24) || game.isDisabledControlJustPressed(0, 24))\r\n                    if (uiMenuItem.Selected && uiMenuItem.Enabled) {\r\n                        if ((this.MenuItems[i] instanceof UIMenuListItem || this.MenuItems[i] instanceof UIMenuAutoListItem || this.MenuItems[i] instanceof UIMenuDynamicListItem)\r\n                            && this.IsMouseInListItemArrows(this.MenuItems[i], new Point(xpos, ypos), 0) > 0) {\r\n                            switch (res) {\r\n                                case 1:\r\n                                    Common.PlaySound(this.AUDIO_SELECT, this.AUDIO_LIBRARY);\r\n                                    this.MenuItems[i].fireEvent();\r\n                                    this.ItemSelect.emit(this.MenuItems[i], i);\r\n                                    break;\r\n                                case 2:\r\n                                    let it = this.MenuItems[i];\r\n                                    if ((it.Collection == null ? it.Items.Count : it.Collection.Count) > 0) {\r\n                                        it.Index++;\r\n                                        Common.PlaySound(this.AUDIO_LEFTRIGHT, this.AUDIO_LIBRARY);\r\n                                        this.ListChange.emit(it, it.Index);\r\n                                    }\r\n                                    break;\r\n                            }\r\n                        }\r\n                        else\r\n                            this.SelectItem();\r\n                    }\r\n                    else if (!uiMenuItem.Selected) {\r\n                        this.CurrentSelection = i;\r\n                        Common.PlaySound(this.AUDIO_UPDOWN, this.AUDIO_LIBRARY);\r\n                        this.IndexChange.emit(this.CurrentSelection, this.MenuItems[this._activeItem % this.MenuItems.length]);\r\n                        this.SelectItem();\r\n                        this.UpdateDescriptionCaption();\r\n                        this.UpdateScaleform();\r\n                    }\r\n                    else if (!uiMenuItem.Enabled && uiMenuItem.Selected) {\r\n                        Common.PlaySound(this.AUDIO_ERROR, this.AUDIO_LIBRARY);\r\n                    }\r\n            }\r\n            else\r\n                uiMenuItem.Hovered = false;\r\n            counter++;\r\n        }\r\n        const extraY = 144 + 38 * (this._maxItemsOnScreen + 1) + this._offset.Y - 37 + this._extraOffset + this._safezoneOffset.Y;\r\n        const extraX = this._safezoneOffset.X + this._offset.X;\r\n        if (this.MenuItems.length <= this._maxItemsOnScreen + 1)\r\n            return;\r\n        if (Screen.IsMouseInBounds(new Point(extraX, extraY), new Size(431 + this.WidthOffset, 18))) {\r\n            this._extraRectangleUp.Color = new Color(30, 30, 30, 255);\r\n            if (game.isControlJustPressed(0, 24) || game.isDisabledControlJustPressed(0, 24)) {\r\n                if (this.MenuItems.length > this._maxItemsOnScreen + 1)\r\n                    this.GoUpOverflow();\r\n                else\r\n                    this.GoUp();\r\n            }\r\n        }\r\n        else\r\n            this._extraRectangleUp.Color = new Color(0, 0, 0, 200);\r\n        if (Screen.IsMouseInBounds(new Point(extraX, extraY + 18), new Size(431 + this.WidthOffset, 18))) {\r\n            this._extraRectangleDown.Color = new Color(30, 30, 30, 255);\r\n            if (game.isControlJustPressed(0, 24) || game.isDisabledControlJustPressed(0, 24)) {\r\n                if (this.MenuItems.length > this._maxItemsOnScreen + 1)\r\n                    this.GoDownOverflow();\r\n                else\r\n                    this.GoDown();\r\n            }\r\n        }\r\n        else\r\n            this._extraRectangleDown.Color = new Color(0, 0, 0, 200);\r\n    }\r\n    ProcessControl() {\r\n        if (!this.Visible)\r\n            return;\r\n        if (this._justOpened) {\r\n            this._justOpened = false;\r\n            return;\r\n        }\r\n        if (game.isControlJustReleased(0, 177)) {\r\n            this.GoBack();\r\n        }\r\n        if (this.MenuItems.length == 0)\r\n            return;\r\n        if (game.isControlPressed(0, 172) && this._lastUpDownNavigation + 120 < Date.now()) {\r\n            this._lastUpDownNavigation = Date.now();\r\n            if (this.MenuItems.length > this._maxItemsOnScreen + 1)\r\n                this.GoUpOverflow();\r\n            else\r\n                this.GoUp();\r\n            this.UpdateScaleform();\r\n        }\r\n        else if (game.isControlJustReleased(0, 172)) {\r\n            this._lastUpDownNavigation = 0;\r\n        }\r\n        else if (game.isControlPressed(0, 173) && this._lastUpDownNavigation + 120 < Date.now()) {\r\n            this._lastUpDownNavigation = Date.now();\r\n            if (this.MenuItems.length > this._maxItemsOnScreen + 1)\r\n                this.GoDownOverflow();\r\n            else\r\n                this.GoDown();\r\n            this.UpdateScaleform();\r\n        }\r\n        else if (game.isControlJustReleased(0, 173)) {\r\n            this._lastUpDownNavigation = 0;\r\n        }\r\n        else if (game.isControlPressed(0, 174) && this._lastLeftRightNavigation + 100 < Date.now()) {\r\n            this._lastLeftRightNavigation = Date.now();\r\n            this.GoLeft();\r\n        }\r\n        else if (game.isControlJustReleased(0, 174)) {\r\n            this._lastLeftRightNavigation = 0;\r\n        }\r\n        else if (game.isControlPressed(0, 175) && this._lastLeftRightNavigation + 100 < Date.now()) {\r\n            this._lastLeftRightNavigation = Date.now();\r\n            this.GoRight();\r\n        }\r\n        else if (game.isControlJustReleased(0, 175)) {\r\n            this._lastLeftRightNavigation = 0;\r\n        }\r\n        else if (game.isControlJustPressed(0, 201)) {\r\n            this.SelectItem();\r\n        }\r\n    }\r\n    GoUpOverflow() {\r\n        if (this.MenuItems.length <= this._maxItemsOnScreen + 1)\r\n            return;\r\n        if (this._activeItem % this.MenuItems.length <= this._minItem) {\r\n            if (this._activeItem % this.MenuItems.length == 0) {\r\n                this._minItem = this.MenuItems.length - this._maxItemsOnScreen - 1;\r\n                this._maxItem = this.MenuItems.length - 1;\r\n                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;\r\n                this._activeItem = this._maxMenuItems - (this._maxMenuItems % this.MenuItems.length);\r\n                this._activeItem += this.MenuItems.length - 1;\r\n                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;\r\n            }\r\n            else {\r\n                this._minItem--;\r\n                this._maxItem--;\r\n                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;\r\n                this._activeItem--;\r\n                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;\r\n            }\r\n        }\r\n        else {\r\n            this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;\r\n            this._activeItem--;\r\n            this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;\r\n        }\r\n        Common.PlaySound(this.AUDIO_UPDOWN, this.AUDIO_LIBRARY);\r\n        this.IndexChange.emit(this.CurrentSelection, this.MenuItems[this._activeItem % this.MenuItems.length]);\r\n        this.UpdateDescriptionCaption();\r\n    }\r\n    GoUp() {\r\n        if (this.MenuItems.length > this._maxItemsOnScreen + 1)\r\n            return;\r\n        this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;\r\n        this._activeItem--;\r\n        this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;\r\n        Common.PlaySound(this.AUDIO_UPDOWN, this.AUDIO_LIBRARY);\r\n        this.IndexChange.emit(this.CurrentSelection, this.MenuItems[this._activeItem % this.MenuItems.length]);\r\n        this.UpdateDescriptionCaption();\r\n    }\r\n    GoDownOverflow() {\r\n        if (this.MenuItems.length <= this._maxItemsOnScreen + 1)\r\n            return;\r\n        if (this._activeItem % this.MenuItems.length >= this._maxItem) {\r\n            if (this._activeItem % this.MenuItems.length == this.MenuItems.length - 1) {\r\n                this._minItem = 0;\r\n                this._maxItem = this._maxItemsOnScreen;\r\n                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;\r\n                this._activeItem = this._maxMenuItems - (this._maxMenuItems % this.MenuItems.length);\r\n                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;\r\n            }\r\n            else {\r\n                this._minItem++;\r\n                this._maxItem++;\r\n                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;\r\n                this._activeItem++;\r\n                this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;\r\n            }\r\n        }\r\n        else {\r\n            this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;\r\n            this._activeItem++;\r\n            this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;\r\n        }\r\n        Common.PlaySound(this.AUDIO_UPDOWN, this.AUDIO_LIBRARY);\r\n        this.IndexChange.emit(this.CurrentSelection, this.MenuItems[this._activeItem % this.MenuItems.length]);\r\n        this.UpdateDescriptionCaption();\r\n    }\r\n    GoDown() {\r\n        if (this.MenuItems.length > this._maxItemsOnScreen + 1)\r\n            return;\r\n        this.MenuItems[this._activeItem % this.MenuItems.length].Selected = false;\r\n        this._activeItem++;\r\n        this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;\r\n        Common.PlaySound(this.AUDIO_UPDOWN, this.AUDIO_LIBRARY);\r\n        this.IndexChange.emit(this.CurrentSelection, this.MenuItems[this._activeItem % this.MenuItems.length]);\r\n        this.UpdateDescriptionCaption();\r\n    }\r\n    GoBack() {\r\n        this.Visible = false;\r\n        if (this.ParentMenu != null) {\r\n            this.ParentMenu.Visible = true;\r\n            this.MenuChange.emit(this.ParentMenu, false);\r\n        }\r\n        else {\r\n            this.CleanUp(true);\r\n        }\r\n        this.MenuClose.emit(false);\r\n    }\r\n    BindMenuToItem(menuToBind, itemToBindTo) {\r\n        if (!this.MenuItems.includes(itemToBindTo)) {\r\n            this.AddItem(itemToBindTo);\r\n        }\r\n        menuToBind.ParentMenu = this;\r\n        menuToBind.ParentItem = itemToBindTo;\r\n        this.Children.set(itemToBindTo.Id, menuToBind);\r\n    }\r\n    AddSubMenu(subMenu, itemToBindTo) {\r\n        this.BindMenuToItem(subMenu, itemToBindTo);\r\n    }\r\n    ReleaseMenuFromItem(releaseFrom) {\r\n        if (!this.Children.has(releaseFrom.Id))\r\n            return false;\r\n        const menu = this.Children.get(releaseFrom.Id);\r\n        menu.ParentItem = null;\r\n        menu.ParentMenu = null;\r\n        this.Children.delete(releaseFrom.Id);\r\n        return true;\r\n    }\r\n    UpdateDescriptionCaption() {\r\n        if (this.MenuItems.length) {\r\n            this._descriptionText.Caption = this.MenuItems[this._activeItem % this.MenuItems.length].Description;\r\n            this._descriptionText.Wrap = 400;\r\n            this._recalculateDescriptionNextFrame++;\r\n        }\r\n    }\r\n    CalculateDescription() {\r\n        if (this._recalculateDescriptionNextFrame > 0) {\r\n            this._recalculateDescriptionNextFrame--;\r\n        }\r\n        this.RecalculateDescriptionPosition();\r\n        if (this.MenuItems.length > 0 && this._descriptionText.Caption && this.MenuItems[this._activeItem % this.MenuItems.length].Description.trim() !== '') {\r\n            const numLines = Screen.GetLineCount(this._descriptionText.Caption, this._descriptionText.Pos, this._descriptionText.Font, this._descriptionText.Scale, this._descriptionText.Wrap);\r\n            this._descriptionRectangle.Size = new Size(431 + this.WidthOffset, (numLines * 25) + 15);\r\n            if (numLines === 0) {\r\n                this._recalculateDescriptionNextFrame++;\r\n            }\r\n        }\r\n    }\r\n    UpdateScaleform() {\r\n        if (!this.Visible || !this._buttonsEnabled)\r\n            return;\r\n        this._instructionalButtonsScaleform.callFunction('CLEAR_ALL');\r\n        this._instructionalButtonsScaleform.callFunction('TOGGLE_MOUSE_BUTTONS', 0);\r\n        this._instructionalButtonsScaleform.callFunction('CREATE_CONTAINER');\r\n        this._instructionalButtonsScaleform.callFunction('SET_DATA_SLOT', 0, game.getControlInstructionalButton(2, Control.PhoneSelect, false), this.SelectTextLocalized);\r\n        this._instructionalButtonsScaleform.callFunction('SET_DATA_SLOT', 1, game.getControlInstructionalButton(2, Control.PhoneCancel, false), this.BackTextLocalized);\r\n        let count = 2;\r\n        this._instructionalButtons.filter(b => b.ItemBind == null || this.MenuItems[this.CurrentSelection] == b.ItemBind).forEach((button) => {\r\n            this._instructionalButtonsScaleform.callFunction('SET_DATA_SLOT', count, button.GetButtonId(), button.Text);\r\n            count++;\r\n        });\r\n        this._instructionalButtonsScaleform.callFunction('DRAW_INSTRUCTIONAL_BUTTONS', -1);\r\n    }\r\n    render() {\r\n        if (!this.Visible)\r\n            return;\r\n        if (this._buttonsEnabled) {\r\n            game.drawScaleformMovieFullscreen(this._instructionalButtonsScaleform.handle, 255, 255, 255, 255, 0);\r\n            game.hideHudComponentThisFrame(6);\r\n            game.hideHudComponentThisFrame(7);\r\n            game.hideHudComponentThisFrame(9);\r\n        }\r\n        if (this._justOpened) {\r\n            if (this._bannerSprite != null && !this._bannerSprite.IsTextureDictionaryLoaded)\r\n                this._bannerSprite.LoadTextureDictionary();\r\n            if (!this._background.IsTextureDictionaryLoaded)\r\n                this._background.LoadTextureDictionary();\r\n            if (!this._descriptionRectangle.IsTextureDictionaryLoaded)\r\n                this._descriptionRectangle.LoadTextureDictionary();\r\n            if (!this._upAndDownSprite.IsTextureDictionaryLoaded)\r\n                this._upAndDownSprite.LoadTextureDictionary();\r\n            if (!this._recalculateDescriptionNextFrame)\r\n                this._recalculateDescriptionNextFrame++;\r\n        }\r\n        this._mainMenu.Draw();\r\n        this.ProcessMouse();\r\n        this.ProcessControl();\r\n        this._background.Size = this.MenuItems.length > this._maxItemsOnScreen + 1\r\n            ? new Size(431 + this.WidthOffset, 38 * (this._maxItemsOnScreen + 1))\r\n            : new Size(431 + this.WidthOffset, 38 * this.MenuItems.length);\r\n        this._background.Draw();\r\n        if (this._recalculateDescriptionNextFrame) {\r\n            this.CalculateDescription();\r\n        }\r\n        if (this.MenuItems.length > 0) {\r\n            this.MenuItems[this._activeItem % this.MenuItems.length].Selected = true;\r\n            if (this.MenuItems[this._activeItem % this.MenuItems.length].Description.trim() !== '') {\r\n                this._descriptionBar.Draw();\r\n                this._descriptionRectangle.Draw();\r\n                this._descriptionText.Draw();\r\n            }\r\n        }\r\n        let count = 0;\r\n        if (this.MenuItems.length <= this._maxItemsOnScreen + 1) {\r\n            for (const item of this.MenuItems) {\r\n                item.SetVerticalPosition(count * 38 - 37 + this._extraOffset);\r\n                item.Draw();\r\n                count++;\r\n            }\r\n            if (this._counterText && this._counterOverride) {\r\n                this._counterText.Caption = this._counterPretext + this._counterOverride;\r\n                this._counterText.Draw();\r\n            }\r\n        }\r\n        else {\r\n            for (let index = this._minItem; index <= this._maxItem; index++) {\r\n                let item = this.MenuItems[index];\r\n                item.SetVerticalPosition(count * 38 - 37 + this._extraOffset);\r\n                item.Draw();\r\n                count++;\r\n            }\r\n            this._extraRectangleUp.Size = new Size(431 + this.WidthOffset, 18);\r\n            this._extraRectangleDown.Size = new Size(431 + this.WidthOffset, 18);\r\n            this._upAndDownSprite.Pos = new Point(190 + this._offset.X + this.WidthOffset / 2, 147 + 37 * (this._maxItemsOnScreen + 1) + this._offset.Y - 37 + this._extraOffset);\r\n            this._extraRectangleUp.Draw();\r\n            this._extraRectangleDown.Draw();\r\n            this._upAndDownSprite.Draw();\r\n            if (this._counterText) {\r\n                if (!this._counterOverride) {\r\n                    const cap = this.CurrentSelection + 1 + ' / ' + this.MenuItems.length;\r\n                    this._counterText.Caption = this._counterPretext + cap;\r\n                }\r\n                else {\r\n                    this._counterText.Caption = this._counterPretext + this._counterOverride;\r\n                }\r\n                this._counterText.Draw();\r\n            }\r\n        }\r\n        if (this._bannerRectangle != null)\r\n            this._bannerRectangle.Draw();\r\n        if (this._bannerSprite != null)\r\n            this._bannerSprite.Draw();\r\n    }\r\n}\r\nexport { NativeUI as Menu, UIMenuItem, UIMenuListItem, UIMenuAutoListItem, UIMenuDynamicListItem, UIMenuCheckboxItem, UIMenuSliderItem, BadgeStyle, ChangeDirection, Font, Alignment, Control, HudColor, Sprite, ResRectangle, InstructionalButton, Point, Size, Color, ItemsCollection, ListItem, BigMessage, MidsizedMessage };\r\n","references":["B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/enums/BadgeStyle.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/enums/Font.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/enums/Alignment.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/enums/Control.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/enums/HudColor.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/enums/ChangeDirection.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/items/UIMenuCheckboxItem.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/items/UIMenuItem.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/items/UIMenuListItem.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/items/UIMenuAutoListItem.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/items/UIMenuSliderItem.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/Container.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/ItemsCollection.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/ListItem.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/ResRectangle.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/ResText.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/Sprite.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Color.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Common.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/LiteEvent.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Point.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Size.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/UUIDV4.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Screen.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/InstructionalButton.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Scaleform.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/BigMessage.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/MidsizedMessage.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/items/UIMenuDynamicListItem.ts"]}
