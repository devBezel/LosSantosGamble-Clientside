{"code":"import * as alt from 'alt';\r\nimport Alignment from \"../enums/Alignment\";\r\nimport game from 'natives';\r\nimport Color from \"../utils/Color\";\r\nimport Point from \"../utils/Point\";\r\nimport Size from \"../utils/Size\";\r\nimport Text from \"./Text\";\r\nimport Screen from \"../utils/Screen\";\r\nexport default class ResText extends Text {\r\n    constructor(caption, pos, scale, color, font, centered) {\r\n        super(caption, pos, scale, color || new Color(255, 255, 255), font || 0, false);\r\n        this.TextAlignment = Alignment.Left;\r\n        this.Wrap = 0;\r\n        if (centered)\r\n            this.TextAlignment = centered;\r\n    }\r\n    get WordWrap() {\r\n        return new Size(this.Wrap, 0);\r\n    }\r\n    set WordWrap(value) {\r\n        this.Wrap = value.Width;\r\n    }\r\n    Draw(arg1, pos, scale, color, font, arg2, dropShadow, outline, wordWrap) {\r\n        let caption = arg1;\r\n        let centered = arg2;\r\n        let textAlignment = arg2;\r\n        if (!arg1)\r\n            arg1 = new Size(0, 0);\r\n        if (arg1 && !pos) {\r\n            textAlignment = this.TextAlignment;\r\n            caption = this.Caption;\r\n            pos = new Point(this.Pos.X + arg1.Width, this.Pos.Y + arg1.Height);\r\n            scale = this.Scale;\r\n            color = this.Color;\r\n            font = this.Font;\r\n            if (centered == true || centered == false) {\r\n                centered = this.Centered;\r\n            }\r\n            else {\r\n                centered = undefined;\r\n                dropShadow = this.DropShadow;\r\n                outline = this.Outline;\r\n                wordWrap = this.WordWrap;\r\n            }\r\n        }\r\n        const screenw = Screen.Width;\r\n        const screenh = Screen.Height;\r\n        const height = 1080.0;\r\n        const ratio = screenw / screenh;\r\n        const width = height * ratio;\r\n        const x = this.Pos.X / width;\r\n        const y = this.Pos.Y / height;\r\n        game.setTextFont(parseInt(font));\r\n        game.setTextScale(1.0, scale);\r\n        game.setTextColour(color.R, color.G, color.B, color.A);\r\n        if (centered !== undefined) {\r\n            game.setTextCentre(centered);\r\n        }\r\n        else {\r\n            if (dropShadow)\r\n                game.setTextDropshadow(2, 0, 0, 0, 0);\r\n            if (outline)\r\n                alt.logWarning(\"[NativeUI] ResText outline not working!\");\r\n            switch (textAlignment) {\r\n                case Alignment.Centered:\r\n                    game.setTextCentre(true);\r\n                    break;\r\n                case Alignment.Right:\r\n                    game.setTextRightJustify(true);\r\n                    game.setTextWrap(0.0, x);\r\n                    break;\r\n            }\r\n            if (this.Wrap) {\r\n                const xsize = (this.Pos.X + this.Wrap) / width;\r\n                game.setTextWrap(x, xsize);\r\n            }\r\n        }\r\n        game.beginTextCommandDisplayText(\"CELL_EMAIL_BCON\");\r\n        Text.AddLongString(caption);\r\n        game.endTextCommandDisplayText(x, y, 0);\r\n    }\r\n}\r\n","references":["B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/enums/Alignment.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Color.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Point.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Size.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/Text.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Screen.ts"]}
