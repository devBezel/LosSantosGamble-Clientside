{"code":"import * as alt from 'alt';\r\nexport default async () => {\r\n    const blips = [];\r\n    alt.onServer('blip:create', createBlip);\r\n    alt.onServer('blip:delete', deleteBlip);\r\n    alt.onServer('blip:updateBlip', updateBlip);\r\n    async function createBlip(posX, posY, posZ, sprite, color, scale, name, shortRange, uniqueID) {\r\n        const blip = new alt.PointBlip(posX, posY, posZ);\r\n        blip.sprite = sprite;\r\n        blip.color = color;\r\n        blip.scale = scale;\r\n        blip.name = name;\r\n        blip.shortRange = true;\r\n        blips.push(blip);\r\n        blip.setMeta('blip:uniqueID', uniqueID);\r\n    }\r\n    async function deleteBlip(uniqueID) {\r\n        alt.log('USUWAM BLIPA');\r\n        blips.forEach((item) => {\r\n            if (item.getMeta('blip:uniqueID') === uniqueID) {\r\n                const blipIndex = blips.findIndex(x => x.getMeta('blip:uniqueID') === uniqueID);\r\n                blips.splice(blipIndex, 1);\r\n                item.destroy();\r\n            }\r\n        });\r\n    }\r\n    async function updateBlip(uniqueID, sprite, name, color) {\r\n        blips.forEach((blip) => {\r\n            if (blip.getMeta('blip:uniqueID') === uniqueID) {\r\n                blip.sprite = sprite;\r\n                blip.name = name;\r\n                blip.color = color;\r\n            }\r\n        });\r\n    }\r\n};\r\n","references":[]}
