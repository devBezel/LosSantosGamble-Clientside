{"code":"import * as alt from 'alt';\r\nimport { objStreamer } from './ObjectStreamer';\r\nexport default async () => {\r\n    alt.onServer('entitySync:create', (entityId, entityType, position, entityData) => {\r\n        alt.log('obj streamin: ', JSON.stringify(entityData));\r\n        if (entityData && entityData !== undefined) {\r\n            if (+entityType === 0) {\r\n                objStreamer.addObject(+entityId, +entityData.model, +entityType, position, entityData.rotation, entityData.lodDistance, entityData.textureVariation, entityData.dynamic, entityData.visible, entityData.onFire, entityData.frozen, entityData.lightColor);\r\n            }\r\n            if (+entityType === 1) {\r\n                objStreamer.removeWorldObject(+entityId, position, +entityData.model, entityData.radius, entityType);\r\n            }\r\n        }\r\n        else {\r\n            objStreamer.restoreObject(+entityId, +entityType);\r\n        }\r\n    });\r\n    alt.onServer('entitySync:remove', (entityId, entityType) => {\r\n        alt.log('streamout: ', entityId);\r\n        objStreamer.removeObject(+entityId, +entityType);\r\n    });\r\n    alt.onServer('entitySync:updatePosition', (entityId, entityType, position) => {\r\n        const obj = objStreamer.getObject(+entityId, +entityType);\r\n        if (obj === null) {\r\n            return;\r\n        }\r\n        objStreamer.setPosition(obj, position);\r\n    });\r\n    alt.onServer('entitySync:updateData', (entityId, entityType, newData) => {\r\n        const obj = objStreamer.getObject(+entityId, +entityType);\r\n        if (obj === null) {\r\n            return;\r\n        }\r\n        if (newData.hasOwnProperty('rotation')) {\r\n            objStreamer.setRotation(obj, newData.rotation);\r\n        }\r\n        if (newData.hasOwnProperty('model')) {\r\n            objStreamer.setModel(obj, newData.model);\r\n        }\r\n        if (newData.hasOwnProperty('lodDistance')) {\r\n            objStreamer.setLodDistance(obj, newData.lodDistance);\r\n        }\r\n        if (newData.hasOwnProperty('textureVariation')) {\r\n            objStreamer.setTextureVariation(obj, newData.textureVariation);\r\n        }\r\n        if (newData.hasOwnProperty('dynamic')) {\r\n            objStreamer.setDynamic(obj, newData.dynamic);\r\n        }\r\n        if (newData.hasOwnProperty('visible')) {\r\n            objStreamer.setVisible(obj, newData.visible);\r\n        }\r\n        if (newData.hasOwnProperty('onFire')) {\r\n            objStreamer.setOnFire(obj, newData.onFire);\r\n        }\r\n        if (newData.hasOwnProperty('frozen')) {\r\n            objStreamer.setFrozen(obj, newData.frozen);\r\n        }\r\n        if (newData.hasOwnProperty('lightColor')) {\r\n            objStreamer.setLightColor(obj, newData.lightColor);\r\n        }\r\n        if (newData.hasOwnProperty('move')) {\r\n            objStreamer.moveObject(obj, newData.move);\r\n        }\r\n        if (newData.hasOwnProperty('radius')) {\r\n            objStreamer.setRadius(obj, newData.radius);\r\n        }\r\n    });\r\n    alt.onServer('entitySync:clearCache', (entityId, entityType) => {\r\n        objStreamer.clearObject(+entityId, +entityType);\r\n    });\r\n};\r\n","references":["B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Streamers/ObjectSteamer/ObjectStreamer.ts"]}
