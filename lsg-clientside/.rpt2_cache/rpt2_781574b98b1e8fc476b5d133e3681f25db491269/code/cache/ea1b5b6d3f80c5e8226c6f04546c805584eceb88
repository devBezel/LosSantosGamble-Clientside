{"code":"import * as alt from 'alt';\r\nimport * as game from 'natives';\r\nimport { ServerEvent } from 'client/modules/Constant/ServerEvent';\r\nimport { ClientEvent } from 'client/modules/Constant/ClientEvent';\r\nimport { Weapons } from 'client/modules/Enum/Weapons';\r\nimport { notificationError } from '../Notify/Notification';\r\nexport default async () => {\r\n    const listPed = [];\r\n    let notify = false;\r\n    alt.onServer(ServerEvent.MAP_CREATE_PED, async (modelString, typePed, scaleformString, posX, posY, posZ, personalId, groupId) => {\r\n        const localPlayerId = alt.Player.local.scriptID;\r\n        alt.loadModel(game.getHashKey(modelString));\r\n        const ped = game.createPed(5, game.getHashKey(modelString), posX, posY, posZ - 1, 0, false, true);\r\n        listPed.push({ model: modelString, type: typePed, scaleform: scaleformString, x: posX, y: posY, z: posZ, pedID: ped, personalID: personalId, groupID: groupId });\r\n        alt.emit(ClientEvent.ADD_DX_DRAW, `pedDevID: ${ped}, type: ${typePed}, personalID: ${personalId} groupID: ${groupId}`, '', posX, posY, posZ, personalId);\r\n        alt.emit(ClientEvent.ADD_DX_DRAW, '', `${scaleformString}`, posX, posY, posZ + 1, personalId);\r\n        game.freezeEntityPosition(ped, true);\r\n        switch (typePed) {\r\n            case 1:\r\n                game.giveWeaponToPed(ped, Weapons.CarbineRifleMkII, 200, true, true);\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n    });\r\n    alt.onServer(ServerEvent.MAP_REMOVE_PED, async (personalID) => {\r\n        const peds = listPed.filter((x) => x.personalID === personalID);\r\n        for (let i = 0; i < peds.length; i++) {\r\n            alt.log(peds[i].pedID);\r\n            game.deletePed(peds[i].pedID);\r\n        }\r\n    });\r\n    alt.onServer(ServerEvent.MAP_REMOVE_PED_GROUP, async (groupID) => {\r\n        const peds = listPed.filter((x) => x.groupID === groupID);\r\n        for (let i = 0; i < peds.length; i++) {\r\n            alt.log(peds[i].pedID);\r\n            game.deletePed(peds[i].pedID);\r\n        }\r\n    });\r\n    alt.onServer(ServerEvent.MAP_PED_CHECK_PLAYER_WEAPON, async (groupId) => {\r\n        const localPlayerId = alt.Player.local.scriptID;\r\n        if (game.getSelectedPedWeapon(localPlayerId) !== Weapons.Fist) {\r\n            const peds = listPed.filter((x) => x.groupID === groupId);\r\n            if (peds === undefined) {\r\n                return;\r\n            }\r\n            if (!notify) {\r\n                notificationError('Wszedłeś na obiekt z bronią, ochroniarze od razu oddadzą do ciebie strzały i wezwą policję!');\r\n                notify = true;\r\n            }\r\n            for (let i = 0; i < peds.length; i++) {\r\n                game.taskAimGunAtEntity(peds[i].pedID, localPlayerId, 10000, true);\r\n                alt.setTimeout(() => {\r\n                    game.taskCombatPed(peds[i].pedID, localPlayerId, localPlayerId, localPlayerId);\r\n                    game.setPedCombatRange(peds[i].pedID, 1);\r\n                }, 50);\r\n            }\r\n        }\r\n    });\r\n    alt.setInterval(() => {\r\n        notify = false;\r\n    }, 5000);\r\n    alt.onServer(ServerEvent.MAP_PED_UN_BW, async (personalId) => {\r\n        const ped = listPed.filter((x) => x.personalID === personalId);\r\n        if (ped[0].type === 1 && ped[0] !== undefined) {\r\n            alt.log('whatever');\r\n            game.deletePed(ped[0].pedID);\r\n            const newPed = game.createPed(5, game.getHashKey(ped[0].model), ped[0].x, ped[0].y, ped[0].z - 1, 0, false, true);\r\n            listPed.push({ model: ped[0].model, type: ped[0].type, scaleform: ped[0].scaleform, x: ped[0].x, y: ped[0].y, z: ped[0].z, pedID: newPed, personalID: personalId, groupID: ped[0].groupID });\r\n            listPed.splice(ped[0]);\r\n        }\r\n    });\r\n};\r\n","references":["B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Constant/ServerEvent.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Constant/ClientEvent.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Enum/Weapons.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Core/Notify/Notification.ts"]}
