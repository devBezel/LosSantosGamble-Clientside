{"code":"import * as alt from 'alt';\r\nimport * as game from 'natives';\r\nimport { PlayerMap } from '../../Helpers/PlayerMap';\r\nimport { PlayerEntity } from '../../Entities/PlayerEntity';\r\nimport { Parser } from '../../Helpers/Parser';\r\nimport { Draw } from '../../Helpers/Draw';\r\nexport default async () => {\r\n    alt.everyTick(async () => {\r\n        alt.Player.all.forEach((player) => {\r\n            alt.setTimeout(() => { }, 15);\r\n            const distanceFromLocal = PlayerMap.distance(player.pos, alt.Player.local.pos);\r\n            if (distanceFromLocal >= 10) {\r\n                return;\r\n            }\r\n            const result = game.getScreenCoordFromWorldCoord(player.pos.x, player.pos.y, player.pos.z + 1.0, undefined, undefined);\r\n            if (!result[0]) {\r\n                return;\r\n            }\r\n            let scale = distanceFromLocal / 25;\r\n            if (scale < 0.5) {\r\n                scale = 0.5;\r\n            }\r\n            if (scale > 0.6)\r\n                scale = 0.6;\r\n            let yModifier = distanceFromLocal / 25 / 8;\r\n            if (yModifier > 0.05) {\r\n                yModifier = 0.05;\r\n            }\r\n            let y = result[2] - yModifier;\r\n            if (y <= 0) {\r\n                y = 0;\r\n            }\r\n            if (PlayerEntity.isOnAdminDuty(player) && PlayerEntity.getPlayerPremium(player) === 1) {\r\n                Draw.drawText(`~y~(${Parser.rank(PlayerEntity.getPlayerAdminRank(player))}~y~) ${PlayerEntity.getPlayerName(player)} (${PlayerEntity.getPlayerServerId(player)})`, result[1], y, 0.4, 6, 255, 255, 255, 255, true, false);\r\n            }\r\n            else if (PlayerEntity.isOnAdminDuty(player)) {\r\n                Draw.drawText(`(${Parser.rank(PlayerEntity.getPlayerAdminRank(player))}~s~) ${PlayerEntity.getPlayerName(player)} (${PlayerEntity.getPlayerServerId(player)})`, result[1], y, 0.4, 6, 255, 255, 255, 255, true, false);\r\n            }\r\n            else if (PlayerEntity.getPlayerPremium(player) === 1) {\r\n                Draw.drawText(`~y~${PlayerEntity.getPlayerName(player)} (${PlayerEntity.getPlayerServerId(player)})`, result[1], y, 0.4, 6, 255, 255, 255, 255, true, false);\r\n            }\r\n            else {\r\n                Draw.drawText(`~s~${PlayerEntity.getPlayerName(player)} (${PlayerEntity.getPlayerServerId(player)})`, result[1], y, 0.4, 6, 255, 255, 255, 255, true, false);\r\n            }\r\n            let text = PlayerEntity.getPlayerCurrentDescription(player);\r\n            if (text != null) {\r\n                if (PlayerEntity.getPlayerPremium(player) !== 1) {\r\n                    text = text.replace(/~/g, '');\r\n                }\r\n                const textOne = text.slice(0, 64);\r\n                const textTwo = text.slice(64, 128);\r\n                const textThree = text.slice(128, 192);\r\n                if (text.length > 0) {\r\n                    const desc = game.getScreenCoordFromWorldCoord(player.pos.x, player.pos.y, player.pos.z + 0.3, undefined, undefined);\r\n                    Draw.drawText(textOne, desc[1], desc[2], 0.3, 6, 255, 255, 255, 255, true, false);\r\n                }\r\n                if (text.length >= 64) {\r\n                    const desc = game.getScreenCoordFromWorldCoord(player.pos.x, player.pos.y, player.pos.z + 0.2, undefined, undefined);\r\n                    Draw.drawText(textTwo, desc[1], desc[2], 0.3, 6, 255, 255, 255, 255, true, false);\r\n                }\r\n                if (text.length >= 128) {\r\n                    const desc = game.getScreenCoordFromWorldCoord(player.pos.x, player.pos.y, player.pos.z + 0.1, undefined, undefined);\r\n                    Draw.drawText(textThree, desc[1], desc[2], 0.3, 6, 255, 255, 255, 255, true, false);\r\n                }\r\n            }\r\n        });\r\n    });\r\n};\r\n","references":["B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Core/Helpers/PlayerMap.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Core/Entities/PlayerEntity.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Core/Helpers/Parser.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Core/Helpers/Draw.ts"]}
