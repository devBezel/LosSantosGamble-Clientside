{"code":"import * as alt from 'alt';\r\nimport game from 'natives';\r\nimport Size from \"./Size\";\r\nimport Text from '../modules/Text';\r\nconst gameScreen = game.getActiveScreenResolution(0, 0);\r\nexport default class Screen {\r\n    static get ResolutionMaintainRatio() {\r\n        const ratio = Screen.Width / Screen.Height;\r\n        const width = 1080.0 * ratio;\r\n        return new Size(width, 1080.0);\r\n    }\r\n    static MousePosition(relative = false) {\r\n        const res = Screen.ResolutionMaintainRatio;\r\n        const cursor = alt.getCursorPos();\r\n        let [mouseX, mouseY] = [cursor.x, cursor.y];\r\n        if (relative)\r\n            [mouseX, mouseY] = [cursor.x / res.Width, cursor.y / res.Height];\r\n        return {\r\n            X: mouseX,\r\n            Y: mouseY\r\n        };\r\n    }\r\n    static IsMouseInBounds(topLeft, boxSize) {\r\n        const mousePosition = Screen.MousePosition();\r\n        return (mousePosition.X >= topLeft.X &&\r\n            mousePosition.X <= topLeft.X + boxSize.Width &&\r\n            (mousePosition.Y > topLeft.Y && mousePosition.Y < topLeft.Y + boxSize.Height));\r\n    }\r\n    static GetTextWidth(text, font, scale) {\r\n        game.beginTextCommandGetWidth(\"CELL_EMAIL_BCON\");\r\n        Text.AddLongString(text);\r\n        game.setTextFont(font);\r\n        game.setTextScale(1.0, scale);\r\n        const width = game.endTextCommandGetWidth(true);\r\n        const res = Screen.ResolutionMaintainRatio;\r\n        return res.Width * width;\r\n    }\r\n    static GetLineCount(text, position, font, scale, wrap) {\r\n        game.beginTextCommandLineCount(\"CELL_EMAIL_BCON\");\r\n        Text.AddLongString(text);\r\n        const res = Screen.ResolutionMaintainRatio;\r\n        const x = position.X / res.Width;\r\n        const y = position.Y / res.Height;\r\n        game.setTextFont(font);\r\n        game.setTextScale(1.0, scale);\r\n        if (wrap > 0) {\r\n            const start = position.X / res.Width;\r\n            const end = start + (wrap / res.Width);\r\n            game.setTextWrap(x, end);\r\n        }\r\n        let lineCount = game.endTextCommandLineCount(x, y);\r\n        return lineCount;\r\n    }\r\n}\r\nScreen.Width = gameScreen[1];\r\nScreen.Height = gameScreen[2];\r\n","references":["B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/enums/Font.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Point.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Size.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/Text.ts"]}
