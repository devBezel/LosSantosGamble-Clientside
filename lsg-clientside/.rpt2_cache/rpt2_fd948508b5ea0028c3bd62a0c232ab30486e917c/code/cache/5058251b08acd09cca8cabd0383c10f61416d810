{"code":"import * as alt from 'alt';\r\nimport BadgeStyle from \"../enums/BadgeStyle\";\r\nimport Font from \"../enums/Font\";\r\nimport Alignment from \"../enums/Alignment\";\r\nimport ResRectangle from \"../modules/ResRectangle\";\r\nimport ResText from \"../modules/ResText\";\r\nimport Sprite from \"../modules/Sprite\";\r\nimport Color from \"../utils/Color\";\r\nimport Point from \"../utils/Point\";\r\nimport Size from \"../utils/Size\";\r\nimport UUIDV4 from \"../utils/UUIDV4\";\r\nexport default class UIMenuItem {\r\n    constructor(text, description = \"\", data = null) {\r\n        this.Id = UUIDV4();\r\n        this.BackColor = UIMenuItem.DefaultBackColor;\r\n        this.HighlightedBackColor = UIMenuItem.DefaultHighlightedBackColor;\r\n        this.ForeColor = UIMenuItem.DefaultForeColor;\r\n        this.HighlightedForeColor = UIMenuItem.DefaultHighlightedForeColor;\r\n        this.RightLabel = \"\";\r\n        this.LeftBadge = BadgeStyle.None;\r\n        this.RightBadge = BadgeStyle.None;\r\n        this.Enabled = true;\r\n        this.Data = data;\r\n        this._rectangle = new ResRectangle(new Point(0, 0), new Size(431, 38), new Color(150, 0, 0, 0));\r\n        this._text = new ResText(text, new Point(8, 0), 0.33, Color.WhiteSmoke, Font.ChaletLondon, Alignment.Left);\r\n        this.Description = description;\r\n        this._selectedSprite = new Sprite(\"commonmenu\", \"gradient_nav\", new Point(0, 0), new Size(431, 38));\r\n        this._badgeLeft = new Sprite(\"commonmenu\", \"\", new Point(0, 0), new Size(40, 40));\r\n        this._badgeRight = new Sprite(\"commonmenu\", \"\", new Point(0, 0), new Size(40, 40));\r\n        this._labelText = new ResText(\"\", new Point(0, 0), 0.35, Color.White, 0, Alignment.Right);\r\n    }\r\n    get Text() {\r\n        return this._text.Caption;\r\n    }\r\n    set Text(text) {\r\n        this._text.Caption = text;\r\n    }\r\n    get Description() {\r\n        return this._description;\r\n    }\r\n    set Description(text) {\r\n        this._description = text;\r\n        if (this.hasOwnProperty('Parent')) {\r\n            this.Parent.UpdateDescriptionCaption();\r\n        }\r\n    }\r\n    SetVerticalPosition(y) {\r\n        this._rectangle.Pos = new Point(this.Offset.X, y + 144 + this.Offset.Y);\r\n        this._selectedSprite.Pos = new Point(0 + this.Offset.X, y + 144 + this.Offset.Y);\r\n        this._text.Pos = new Point(8 + this.Offset.X, y + 147 + this.Offset.Y);\r\n        this._badgeLeft.Pos = new Point(0 + this.Offset.X, y + 142 + this.Offset.Y);\r\n        this._badgeRight.Pos = new Point(385 + this.Offset.X, y + 142 + this.Offset.Y);\r\n        this._labelText.Pos = new Point(420 + this.Offset.X, y + 148 + this.Offset.Y);\r\n    }\r\n    addEvent(event, ...args) {\r\n        this._event = { event: event, args: args };\r\n    }\r\n    fireEvent() {\r\n        if (this._event) {\r\n            alt.emit(this._event.event, ...this._event.args);\r\n        }\r\n    }\r\n    Draw() {\r\n        this._rectangle.Size = new Size(431 + this.Parent.WidthOffset, 38);\r\n        this._selectedSprite.Size = new Size(431 + this.Parent.WidthOffset, 38);\r\n        if (this.Hovered && !this.Selected) {\r\n            this._rectangle.Color = new Color(255, 255, 255, 20);\r\n            this._rectangle.Draw();\r\n        }\r\n        this._selectedSprite.Color = this.Selected\r\n            ? this.HighlightedBackColor\r\n            : this.BackColor;\r\n        this._selectedSprite.Draw();\r\n        this._text.Color = this.Enabled\r\n            ? this.Selected\r\n                ? this.HighlightedForeColor\r\n                : this.ForeColor\r\n            : new Color(163, 159, 148);\r\n        if (this.LeftBadge != BadgeStyle.None) {\r\n            this._text.Pos = new Point(35 + this.Offset.X, this._text.Pos.Y);\r\n            this._badgeLeft.TextureDict = this.BadgeToSpriteLib(this.LeftBadge);\r\n            this._badgeLeft.TextureName = this.BadgeToSpriteName(this.LeftBadge, this.Selected);\r\n            this._badgeLeft.Color = this.IsBagdeWhiteSprite(this.LeftBadge)\r\n                ? this.Enabled\r\n                    ? this.Selected\r\n                        ? this.HighlightedForeColor\r\n                        : this.ForeColor\r\n                    : new Color(163, 159, 148)\r\n                : Color.White;\r\n            this._badgeLeft.Draw();\r\n        }\r\n        else {\r\n            this._text.Pos = new Point(8 + this.Offset.X, this._text.Pos.Y);\r\n        }\r\n        if (this.RightBadge != BadgeStyle.None) {\r\n            this._badgeRight.Pos = new Point(385 + this.Offset.X + this.Parent.WidthOffset, this._badgeRight.Pos.Y);\r\n            this._badgeRight.TextureDict = this.BadgeToSpriteLib(this.RightBadge);\r\n            this._badgeRight.TextureName = this.BadgeToSpriteName(this.RightBadge, this.Selected);\r\n            this._badgeRight.Color = this.IsBagdeWhiteSprite(this.RightBadge)\r\n                ? this.Enabled\r\n                    ? this.Selected\r\n                        ? this.HighlightedForeColor\r\n                        : this.ForeColor\r\n                    : new Color(163, 159, 148)\r\n                : Color.White;\r\n            this._badgeRight.Draw();\r\n        }\r\n        if (this.RightLabel && this.RightLabel !== \"\") {\r\n            this._labelText.Pos = new Point(420 + this.Offset.X + this.Parent.WidthOffset, this._labelText.Pos.Y);\r\n            this._labelText.Caption = this.RightLabel;\r\n            this._labelText.Color = this._text.Color = this.Enabled\r\n                ? this.Selected\r\n                    ? this.HighlightedForeColor\r\n                    : this.ForeColor\r\n                : new Color(163, 159, 148);\r\n            this._labelText.Draw();\r\n        }\r\n        this._text.Draw();\r\n    }\r\n    SetLeftBadge(badge) {\r\n        this.LeftBadge = badge;\r\n    }\r\n    SetRightBadge(badge) {\r\n        this.RightBadge = badge;\r\n    }\r\n    SetRightLabel(text) {\r\n        this.RightLabel = text;\r\n    }\r\n    BadgeToSpriteLib(badge) {\r\n        switch (badge) {\r\n            case BadgeStyle.Sale:\r\n                return \"mpshopsale\";\r\n            case BadgeStyle.Audio1:\r\n            case BadgeStyle.Audio2:\r\n            case BadgeStyle.Audio3:\r\n            case BadgeStyle.AudioInactive:\r\n            case BadgeStyle.AudioMute:\r\n                return \"mpleaderboard\";\r\n            default:\r\n                return \"commonmenu\";\r\n        }\r\n    }\r\n    BadgeToSpriteName(badge, selected) {\r\n        switch (badge) {\r\n            case BadgeStyle.None:\r\n                return \"\";\r\n            case BadgeStyle.BronzeMedal:\r\n                return \"mp_medal_bronze\";\r\n            case BadgeStyle.GoldMedal:\r\n                return \"mp_medal_gold\";\r\n            case BadgeStyle.SilverMedal:\r\n                return \"medal_silver\";\r\n            case BadgeStyle.Alert:\r\n                return \"mp_alerttriangle\";\r\n            case BadgeStyle.Crown:\r\n                return \"mp_hostcrown\";\r\n            case BadgeStyle.Ammo:\r\n                return selected ? \"shop_ammo_icon_b\" : \"shop_ammo_icon_a\";\r\n            case BadgeStyle.Armour:\r\n                return selected ? \"shop_armour_icon_b\" : \"shop_armour_icon_a\";\r\n            case BadgeStyle.Barber:\r\n                return selected ? \"shop_barber_icon_b\" : \"shop_barber_icon_a\";\r\n            case BadgeStyle.Clothes:\r\n                return selected ? \"shop_clothing_icon_b\" : \"shop_clothing_icon_a\";\r\n            case BadgeStyle.Franklin:\r\n                return selected ? \"shop_franklin_icon_b\" : \"shop_franklin_icon_a\";\r\n            case BadgeStyle.Bike:\r\n                return selected ? \"shop_garage_bike_icon_b\" : \"shop_garage_bike_icon_a\";\r\n            case BadgeStyle.Car:\r\n                return selected ? \"shop_garage_icon_b\" : \"shop_garage_icon_a\";\r\n            case BadgeStyle.Gun:\r\n                return selected ? \"shop_gunclub_icon_b\" : \"shop_gunclub_icon_a\";\r\n            case BadgeStyle.Heart:\r\n                return selected ? \"shop_health_icon_b\" : \"shop_health_icon_a\";\r\n            case BadgeStyle.Lock:\r\n                return \"shop_lock\";\r\n            case BadgeStyle.Makeup:\r\n                return selected ? \"shop_makeup_icon_b\" : \"shop_makeup_icon_a\";\r\n            case BadgeStyle.Mask:\r\n                return selected ? \"shop_mask_icon_b\" : \"shop_mask_icon_a\";\r\n            case BadgeStyle.Michael:\r\n                return selected ? \"shop_michael_icon_b\" : \"shop_michael_icon_a\";\r\n            case BadgeStyle.Star:\r\n                return \"shop_new_star\";\r\n            case BadgeStyle.Tatoo:\r\n                return selected ? \"shop_tattoos_icon_b\" : \"shop_tattoos_icon_\";\r\n            case BadgeStyle.Tick:\r\n                return \"shop_tick_icon\";\r\n            case BadgeStyle.Trevor:\r\n                return selected ? \"shop_trevor_icon_b\" : \"shop_trevor_icon_a\";\r\n            case BadgeStyle.Sale:\r\n                return \"saleicon\";\r\n            case BadgeStyle.ArrowLeft:\r\n                return \"arrowleft\";\r\n            case BadgeStyle.ArrowRight:\r\n                return \"arrowright\";\r\n            case BadgeStyle.Audio1:\r\n                return \"leaderboard_audio_1\";\r\n            case BadgeStyle.Audio2:\r\n                return \"leaderboard_audio_2\";\r\n            case BadgeStyle.Audio3:\r\n                return \"leaderboard_audio_3\";\r\n            case BadgeStyle.AudioInactive:\r\n                return \"leaderboard_audio_inactive\";\r\n            case BadgeStyle.AudioMute:\r\n                return \"leaderboard_audio_mute\";\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n    IsBagdeWhiteSprite(badge) {\r\n        switch (badge) {\r\n            case BadgeStyle.Lock:\r\n            case BadgeStyle.Tick:\r\n            case BadgeStyle.Crown:\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n    BadgeToColor(badge, selected) {\r\n        switch (badge) {\r\n            case BadgeStyle.Lock:\r\n            case BadgeStyle.Tick:\r\n            case BadgeStyle.Crown:\r\n                return selected\r\n                    ? new Color(255, 0, 0, 0)\r\n                    : new Color(255, 255, 255, 255);\r\n            default:\r\n                return new Color(255, 255, 255, 255);\r\n        }\r\n    }\r\n}\r\nUIMenuItem.DefaultBackColor = Color.Empty;\r\nUIMenuItem.DefaultHighlightedBackColor = Color.White;\r\nUIMenuItem.DefaultForeColor = Color.WhiteSmoke;\r\nUIMenuItem.DefaultHighlightedForeColor = Color.Black;\r\n","references":["B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/enums/BadgeStyle.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/enums/Font.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/enums/Alignment.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/NativeUi.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/ResRectangle.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/ResText.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/modules/Sprite.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Color.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Point.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/Size.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Includes/nativeui/utils/UUIDV4.ts"]}
