{"code":"import * as alt from 'alt';\r\nimport * as game from 'natives';\r\nimport { Calculation } from '../Utilities/Calculation';\r\nimport { Controls } from '../Utilities/Controls';\r\nimport { Key } from 'client/modules/Constant/Keys/Key';\r\nimport { View } from '../Utilities/View';\r\nimport { objStreamer } from '../../Streamers/ObjectSteamer/ObjectStreamer';\r\nexport default async () => {\r\n    const player = alt.Player.local;\r\n    let itemID;\r\n    let objectHash;\r\n    let webView;\r\n    let useObjectState = false;\r\n    let drawLineInterval;\r\n    let createdObject;\r\n    const rotationObject = { x: 0, y: 0, z: 0 };\r\n    alt.onServer('item:useObject', useObiectItem);\r\n    async function useObiectItem(itemId, objectId) {\r\n        if (useObjectState) {\r\n            return disposeUseObiect();\r\n        }\r\n        if (!webView) {\r\n            webView = new View();\r\n        }\r\n        itemID = itemId;\r\n        objectHash = objectId;\r\n        webView.open('', true, 'object/editor/overlay', true);\r\n        useObjectState = true;\r\n        alt.showCursor(true);\r\n        createdObject = game.createObject(objectId, player.pos.x, player.pos.y, player.pos.z, true, true, true);\r\n        alt.log(createdObject);\r\n        game.setEntityCollision(createdObject, false, false);\r\n        game.freezeEntityPosition(createdObject, true);\r\n        game.setEntityVisible(player.scriptID, false, false);\r\n        player.nicknameVisableOff(true);\r\n        drawLineInterval = alt.setInterval(() => {\r\n            Controls.disableControls();\r\n            Calculation.screen2dToWorld3dPosition(alt.getCursorPos().x, alt.getCursorPos().y, -1, player.scriptID, (result) => {\r\n                const interactObjectPos = result[2];\r\n                game.setEntityCoords(createdObject, interactObjectPos.x, interactObjectPos.y, interactObjectPos.z, false, false, false, false);\r\n                game.setEntityRotation(createdObject, rotationObject.x, rotationObject.y, rotationObject.z, 0, false);\r\n            });\r\n        }, 1);\r\n    }\r\n    alt.on('keyup', async (key) => {\r\n        if (useObjectState) {\r\n            switch (key) {\r\n                case Key.UP: return rotationObject.x -= 2;\r\n                case Key.DOWN: return rotationObject.x += 2;\r\n                case Key.LEFT: return rotationObject.y -= 2;\r\n                case Key.RIGHT: return rotationObject.y += 2;\r\n                case Key.E: return createDynamicWorldObject();\r\n                case Key.ESCAPE: return disposeUseObiect();\r\n                default:\r\n                    break;\r\n            }\r\n        }\r\n    });\r\n    async function disposeUseObiect(cancelItemUse = true) {\r\n        if (webView) {\r\n            webView.close();\r\n        }\r\n        useObjectState = false;\r\n        alt.showCursor(false);\r\n        alt.clearInterval(drawLineInterval);\r\n        game.deleteObject(createdObject);\r\n        game.setEntityVisible(player.scriptID, true, false);\r\n        player.nicknameVisableOff(false);\r\n        if (cancelItemUse) {\r\n            alt.emitServer('item:cancelUseObject', itemID);\r\n        }\r\n    }\r\n    async function createDynamicWorldObject() {\r\n        alt.emitServer('item:createWorldObject', objectHash, JSON.stringify(game.getEntityCoords(createdObject, true)), JSON.stringify(rotationObject));\r\n        disposeUseObiect(false);\r\n    }\r\n    alt.on('interaction2D:object', objectInteractionMenu);\r\n    async function objectInteractionMenu(objectId) {\r\n        if (objectId === undefined) {\r\n            return;\r\n        }\r\n        const objOnWorld = objStreamer.getObjectByHandleId(objectId);\r\n        alt.log(`ID OBIEKTU DO USUNIÄ˜CIA: ${objectId}, ID HANDLE: ${objOnWorld.handle}, Entity ID: ${objOnWorld.entityId}`);\r\n        alt.emitServer('item:removeWorldObject', objOnWorld.entityId, itemID);\r\n    }\r\n};\r\n","references":["B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Core/Utilities/Calculation.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Core/Utilities/Controls.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Constant/Keys/Key.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Core/Utilities/View.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Streamers/ObjectSteamer/ObjectStreamer.ts"]}
