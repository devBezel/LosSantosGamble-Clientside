{"code":"import * as alt from 'alt';\r\nimport * as natives from 'natives';\r\nclass AsyncModel {\r\n    constructor() {\r\n        this.loadingModels = new Set();\r\n    }\r\n    cancel(entityId) {\r\n        this.loadingModels.delete(+entityId);\r\n    }\r\n    async load(entityId, model) {\r\n        return new Promise((resolve) => {\r\n            if (typeof model === 'string') {\r\n                model = natives.getHashKey(model);\r\n            }\r\n            this.loadingModels.add(+entityId);\r\n            natives.requestModel(model);\r\n            const interval = alt.setInterval(() => {\r\n                if (!this.loadingModels.has(+entityId)) {\r\n                    return done(!!natives.hasModelLoaded(model));\r\n                }\r\n                if (natives.hasModelLoaded(model)) {\r\n                    return done(true);\r\n                }\r\n            }, 0);\r\n            const timeout = alt.setTimeout(() => {\r\n                return done(!!natives.hasModelLoaded(model));\r\n            }, 3000);\r\n            const done = (result) => {\r\n                alt.clearInterval(interval);\r\n                alt.clearTimeout(timeout);\r\n                this.loadingModels.delete(+entityId);\r\n                resolve(result);\r\n            };\r\n            if (!natives.isModelValid(model)) {\r\n                return done(false);\r\n            }\r\n            if (natives.hasModelLoaded(model)) {\r\n                return done(true);\r\n            }\r\n        });\r\n    }\r\n}\r\nexport const asyncModel = new AsyncModel();\r\n","references":[]}
