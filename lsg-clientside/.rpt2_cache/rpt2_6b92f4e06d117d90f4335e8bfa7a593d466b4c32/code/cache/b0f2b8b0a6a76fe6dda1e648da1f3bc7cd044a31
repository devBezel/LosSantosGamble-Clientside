{"code":"import * as alt from 'alt';\r\nimport * as game from 'natives';\r\nimport { Position } from '../../Utilities/Position';\r\nimport { Player } from '../../Entities/Player';\r\nimport { Draw } from '../../Utilities/Draw';\r\nimport { RankParser } from '../../Helpers/RankParser';\r\nexport default async () => {\r\n    alt.setInterval(async () => {\r\n        alt.Player.all.forEach((player) => {\r\n            if (alt.Player.local.getMeta('scaleform:nicknameTurnOff'))\r\n                return;\r\n            const serverID = player.getSyncedMeta('account:id');\r\n            const onAdminDuty = player.getSyncedMeta('admin:setDuty');\r\n            const hasPremium = player.getSyncedMeta('account:hasPremium');\r\n            const accountData = player.getSyncedMeta('account:dataAccount');\r\n            const characterData = player.getSyncedMeta('character:dataCharacter');\r\n            const isAfk = player.getSyncedMeta('player:afk');\r\n            const characterName = player.getSyncedMeta('character:name');\r\n            const distanceFromLocal = Position.distance(player.pos, alt.Player.local.pos);\r\n            if (distanceFromLocal >= 10) {\r\n                return;\r\n            }\r\n            const result = game.getScreenCoordFromWorldCoord(player.pos.x, player.pos.y, player.pos.z + 1.0, undefined, undefined);\r\n            if (!result[0]) {\r\n                return;\r\n            }\r\n            let y = result[2];\r\n            if (y <= 0) {\r\n                y = 0;\r\n            }\r\n            let username;\r\n            if (onAdminDuty && hasPremium && characterData.name) {\r\n                username = `(${RankParser.parse(accountData.rank)}) ~y~ ${accountData.username} (${serverID})`;\r\n            }\r\n            else if (onAdminDuty) {\r\n                username = `(${RankParser.parse(accountData.rank)}) ${accountData.username} (${serverID})`;\r\n            }\r\n            else if (hasPremium) {\r\n                username = `~y~ ${characterName} (${serverID})`;\r\n            }\r\n            else {\r\n                username = `${characterName} (${serverID})`;\r\n            }\r\n            if (isAfk) {\r\n                username += ' (~g~AFK~s~)';\r\n            }\r\n            Draw.drawText(username, result[1], y, 0.3, 6, 255, 255, 255, 255, false, false);\r\n            let text = Player.getPlayerDescription(player);\r\n            if (text === null || text === undefined) {\r\n                return;\r\n            }\r\n            if (!hasPremium) {\r\n                if (text === null || text === undefined)\r\n                    return;\r\n                text = text.replace(/~/g, '');\r\n            }\r\n            const textOne = text.slice(0, 64);\r\n            const textTwo = text.slice(64, 128);\r\n            const textThree = text.slice(128, 192);\r\n            if (text.length > 0) {\r\n                const desc = game.getScreenCoordFromWorldCoord(player.pos.x, player.pos.y, player.pos.z + 0.3, undefined, undefined);\r\n                Draw.drawText(textOne, desc[1], desc[2], 0.2, 6, 255, 255, 255, 255, false, false);\r\n            }\r\n            if (text.length >= 64) {\r\n                const desc = game.getScreenCoordFromWorldCoord(player.pos.x, player.pos.y, player.pos.z + 0.2, undefined, undefined);\r\n                Draw.drawText(textTwo, desc[1], desc[2], 0.2, 6, 255, 255, 255, 255, false, false);\r\n            }\r\n            if (text.length >= 128) {\r\n                const desc = game.getScreenCoordFromWorldCoord(player.pos.x, player.pos.y, player.pos.z + 0.1, undefined, undefined);\r\n                Draw.drawText(textThree, desc[1], desc[2], 0.2, 6, 255, 255, 255, 255, false, false);\r\n            }\r\n        });\r\n    }, 0);\r\n};\r\n","references":["B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Core/Utilities/Position.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Core/Entities/Player.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Core/Utilities/Draw.ts","B:/Projekty/LSGamble-Clientside/lsg-clientside/modules/Core/Helpers/RankParser.ts"]}
