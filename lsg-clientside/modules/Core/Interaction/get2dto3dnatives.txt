function rotationToDirection(rotation) {
	let z = degToRad(rotation.z);
	let x = degToRad(rotation.x);
	let num = Math.abs(Math.cos(x));

	let result = {};
	result.x = (-Math.sin(z) * num);
	result.y = (Math.cos(z) * num);
	result.z =  Math.sin(x);
	return result;
}



function processCoordinates(x, y) {
	var res = game.getActiveScreenResolution(0, 0);
	let screenX = res[1];
	let screenY = res[2];

	let relativeX = (1 - ((x / screenX) * 1.0) * 2);
	let relativeY = (1 - ((y / screenY) * 1.0) * 2);
 
	if (relativeX > 0.0) {
		relativeX = -relativeX;
	} else {
		relativeX = Math.abs(relativeX);
	}
 
	if (relativeY > 0.0) {
		relativeY = -relativeY;
	} else {
		relativeY = Math.abs(relativeY);
	}
 
	return { x: relativeX, y: relativeY };
}

function degToRad(deg) {
	return deg * Math.PI / 180.0;
}

function mulNumber(vector1, value) {
	var result = {};
	result.x = vector1.x * value;
	result.y = vector1.y * value;
	result.z = vector1.z * value;
	return result;
}

function w2s(position) {
	let result = game.getScreenCoordFromWorldCoord(position.x, position.y, position.z, undefined, undefined);

	if (!result[0]) {
		return undefined;
	}
 
	let newPos = {};
	newPos.x = (result[1] - 0.5) * 2;
	newPos.y = (result[2] - 0.5) * 2;
	newPos.z = 0;
	return newPos;
}

function SubVector3(vector1, vector2) {
	return {
		x: vector1.x - vector2.x,
		y: vector1.y - vector2.y,
		z: vector1.z - vector2.z
	};
}

function AddVector3(vector1, vector2) {
	return {
		x: vector1.x + vector2.x,
		y: vector1.y + vector2.y,
		z: vector1.z + vector2.z
	};
}


function GetMousePOSAbs() {
	var x = game.getControlNormal(0, 239);
	var y = game.getControlNormal(0, 240);
	var screenRes = game.getActiveScreenResolution(0, 0);
	var actualX = screenRes[1] * x;
	var actualY = screenRes[2] * y;
	return { x: actualX, y: actualY };
}

function s2w(camPos, relX, relY) {
	let camRot = game.getGameplayCamRot(0);
	let camForward = rotationToDirection(camRot);
	let rotUp = AddVector3(camRot, { x: 10, y: 0, z: 0 });
	let rotDown = AddVector3(camRot, { x: -10, y: 0, z: 0 });
	let rotLeft = AddVector3(camRot, { x: 0, y: 0, z: -10 });
	let rotRight = AddVector3(camRot, {x: 0, y: 0, z: 10 });
 
	let camRight = SubVector3(rotationToDirection(rotRight), rotationToDirection(rotLeft));
	let camUp = SubVector3(rotationToDirection(rotUp), rotationToDirection(rotDown));
 
	let rollRad = -degToRad(camRot.y);
 
	let camRightRoll = SubVector3(mulNumber(camRight, Math.cos(rollRad)), mulNumber(camUp, Math.sin(rollRad)));
	let camUpRoll = AddVector3(mulNumber(camRight, Math.sin(rollRad)), mulNumber(camUp, Math.cos(rollRad)));
 
	let point3D = AddVector3(
		AddVector3(
			AddVector3(camPos, mulNumber(camForward, 10.0)),
			camRightRoll
		),
		camUpRoll);
 
	let point2D = w2s(point3D);
 
	if (point2D === undefined) {
		return AddVector3(camPos, mulNumber(camForward, 10.0));
	}
 
	let point3DZero = AddVector3(camPos, mulNumber(camForward, 10.0));
	let point2DZero = w2s(point3DZero);
 
	if (point2DZero === undefined) {
		return AddVector3(camPos, mulNumber(camForward, 10.0));
	}
 
	let eps = 0.001;
 
	if (Math.abs(point2D.x - point2DZero.x) < eps || Math.abs(point2D.y - point2DZero.y) < eps) {
		return AddVector3(camPos, mulNumber(camForward, 10.0));
	}
 
	let scaleX = (relX - point2DZero.x) / (point2D.x - point2DZero.x);
	let scaleY = (relY - point2DZero.y) / (point2D.y - point2DZero.y);
	let point3Dret = AddVector3(
		AddVector3(
			AddVector3(camPos, mulNumber(camForward, 10.0)),
			mulNumber(camRightRoll, scaleX)
		),
		mulNumber(camUpRoll, scaleY));
 
	return point3Dret;
}

function Screen2dToWorld3dPosition(absoluteX, absoluteY, flags, ignore, callback) {
	let camPos = game.getGameplayCamCoord();
	let processedCoords = processCoordinates(absoluteX, absoluteY);
	let target = s2w(camPos, processedCoords.x, processedCoords.y);
 
	let dir = SubVector3(target, camPos);
	let from = AddVector3(camPos, mulNumber(dir, 0.05));
	let to = AddVector3(camPos, mulNumber(dir, 300));
 
	let ray = game.startShapeTestRay(from.x, from.y, from.z, to.x, to.y, to.z, flags, ignore, 0);
	let result = game.getShapeTestResult(ray, undefined, undefined, undefined, undefined);
	callback(result);
}

const cursorPos = GetMousePOSAbs();

Screen2dToWorld3dPosition(cursorPos.x, cursorPos.y, 1, alt.Player.local.scriptID, (result) => {
    alt.log(JSON.stringify(result));
    alt.log(result[5]);
});